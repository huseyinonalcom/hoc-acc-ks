# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type WorkOrder {
  id: ID!
  number: String
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  materialsCount(where: MaterialWhereInput! = {}): Int
  operations(where: WorkOrderOperationWhereInput! = {}, orderBy: [WorkOrderOperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderOperationWhereUniqueInput): [WorkOrderOperation!]
  operationsCount(where: WorkOrderOperationWhereInput! = {}): Int
  datePlanned: DateTime
  dateStarted: DateTime
  dateFinished: DateTime
  creator: User
  extraFields: JSON
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input WorkOrderWhereUniqueInput {
  id: ID
}

input WorkOrderWhereInput {
  AND: [WorkOrderWhereInput!]
  OR: [WorkOrderWhereInput!]
  NOT: [WorkOrderWhereInput!]
  id: IDFilter
  number: StringFilter
  materials: MaterialManyRelationFilter
  operations: WorkOrderOperationManyRelationFilter
  datePlanned: DateTimeNullableFilter
  dateStarted: DateTimeNullableFilter
  dateFinished: DateTimeNullableFilter
  creator: UserWhereInput
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input MaterialManyRelationFilter {
  every: MaterialWhereInput
  some: MaterialWhereInput
  none: MaterialWhereInput
}

input WorkOrderOperationManyRelationFilter {
  every: WorkOrderOperationWhereInput
  some: WorkOrderOperationWhereInput
  none: WorkOrderOperationWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input WorkOrderOrderByInput {
  id: OrderDirection
  number: OrderDirection
  datePlanned: OrderDirection
  dateStarted: OrderDirection
  dateFinished: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input WorkOrderUpdateInput {
  number: String
  materials: MaterialRelateToManyForUpdateInput
  operations: WorkOrderOperationRelateToManyForUpdateInput
  datePlanned: DateTime
  dateStarted: DateTime
  dateFinished: DateTime
  creator: UserRelateToOneForUpdateInput
  extraFields: JSON
}

input MaterialRelateToManyForUpdateInput {
  disconnect: [MaterialWhereUniqueInput!]
  set: [MaterialWhereUniqueInput!]
  create: [MaterialCreateInput!]
  connect: [MaterialWhereUniqueInput!]
}

input WorkOrderOperationRelateToManyForUpdateInput {
  disconnect: [WorkOrderOperationWhereUniqueInput!]
  set: [WorkOrderOperationWhereUniqueInput!]
  create: [WorkOrderOperationCreateInput!]
  connect: [WorkOrderOperationWhereUniqueInput!]
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input WorkOrderUpdateArgs {
  where: WorkOrderWhereUniqueInput!
  data: WorkOrderUpdateInput!
}

input WorkOrderCreateInput {
  number: String
  materials: MaterialRelateToManyForCreateInput
  operations: WorkOrderOperationRelateToManyForCreateInput
  datePlanned: DateTime
  dateStarted: DateTime
  dateFinished: DateTime
  creator: UserRelateToOneForCreateInput
  extraFields: JSON
}

input MaterialRelateToManyForCreateInput {
  create: [MaterialCreateInput!]
  connect: [MaterialWhereUniqueInput!]
}

input WorkOrderOperationRelateToManyForCreateInput {
  create: [WorkOrderOperationCreateInput!]
  connect: [WorkOrderOperationWhereUniqueInput!]
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type WorkOrderOperation {
  id: ID!
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  price: Float
  reduction: Float
  amount: Float
  total: Float
  wastage: Float
  workOrder: WorkOrder
  operation: Operation
  extraFields: JSON
}

input WorkOrderOperationWhereUniqueInput {
  id: ID
}

input WorkOrderOperationWhereInput {
  AND: [WorkOrderOperationWhereInput!]
  OR: [WorkOrderOperationWhereInput!]
  NOT: [WorkOrderOperationWhereInput!]
  id: IDFilter
  files: FileManyRelationFilter
  startedAt: DateTimeNullableFilter
  finishedAt: DateTimeNullableFilter
  name: StringFilter
  description: StringFilter
  value: FloatFilter
  reduction: FloatNullableFilter
  amount: FloatFilter
  wastage: FloatNullableFilter
  workOrder: WorkOrderWhereInput
  operation: OperationWhereInput
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input WorkOrderOperationOrderByInput {
  id: OrderDirection
  startedAt: OrderDirection
  finishedAt: OrderDirection
  name: OrderDirection
  description: OrderDirection
  value: OrderDirection
  reduction: OrderDirection
  amount: OrderDirection
  wastage: OrderDirection
}

input WorkOrderOperationUpdateInput {
  files: FileRelateToManyForUpdateInput
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  reduction: Float
  amount: Float
  wastage: Float
  workOrder: WorkOrderRelateToOneForUpdateInput
  operation: OperationRelateToOneForUpdateInput
  extraFields: JSON
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input WorkOrderRelateToOneForUpdateInput {
  create: WorkOrderCreateInput
  connect: WorkOrderWhereUniqueInput
  disconnect: Boolean
}

input OperationRelateToOneForUpdateInput {
  create: OperationCreateInput
  connect: OperationWhereUniqueInput
  disconnect: Boolean
}

input WorkOrderOperationUpdateArgs {
  where: WorkOrderOperationWhereUniqueInput!
  data: WorkOrderOperationUpdateInput!
}

input WorkOrderOperationCreateInput {
  files: FileRelateToManyForCreateInput
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  reduction: Float
  amount: Float
  wastage: Float
  workOrder: WorkOrderRelateToOneForCreateInput
  operation: OperationRelateToOneForCreateInput
  extraFields: JSON
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input WorkOrderRelateToOneForCreateInput {
  create: WorkOrderCreateInput
  connect: WorkOrderWhereUniqueInput
}

input OperationRelateToOneForCreateInput {
  create: OperationCreateInput
  connect: OperationWhereUniqueInput
}

type Operation {
  id: ID!
  name: String
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  material: Material
  workOrderOperations(where: WorkOrderOperationWhereInput! = {}, orderBy: [WorkOrderOperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderOperationWhereUniqueInput): [WorkOrderOperation!]
  workOrderOperationsCount(where: WorkOrderOperationWhereInput! = {}): Int
  user: User
  cost: Float
  value: Float
  duration: Int
  description: String
  extraFields: JSON
}

input OperationWhereUniqueInput {
  id: ID
}

input OperationWhereInput {
  AND: [OperationWhereInput!]
  OR: [OperationWhereInput!]
  NOT: [OperationWhereInput!]
  id: IDFilter
  name: StringFilter
  files: FileManyRelationFilter
  material: MaterialWhereInput
  workOrderOperations: WorkOrderOperationManyRelationFilter
  user: UserWhereInput
  cost: FloatNullableFilter
  value: FloatFilter
  duration: IntNullableFilter
  description: StringFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input OperationOrderByInput {
  id: OrderDirection
  name: OrderDirection
  cost: OrderDirection
  value: OrderDirection
  duration: OrderDirection
  description: OrderDirection
}

input OperationUpdateInput {
  name: String
  files: FileRelateToManyForUpdateInput
  material: MaterialRelateToOneForUpdateInput
  workOrderOperations: WorkOrderOperationRelateToManyForUpdateInput
  user: UserRelateToOneForUpdateInput
  cost: Float
  value: Float
  duration: Int
  description: String
  extraFields: JSON
}

input MaterialRelateToOneForUpdateInput {
  create: MaterialCreateInput
  connect: MaterialWhereUniqueInput
  disconnect: Boolean
}

input OperationUpdateArgs {
  where: OperationWhereUniqueInput!
  data: OperationUpdateInput!
}

input OperationCreateInput {
  name: String
  files: FileRelateToManyForCreateInput
  material: MaterialRelateToOneForCreateInput
  workOrderOperations: WorkOrderOperationRelateToManyForCreateInput
  user: UserRelateToOneForCreateInput
  cost: Float
  value: Float
  duration: Int
  description: String
  extraFields: JSON
}

input MaterialRelateToOneForCreateInput {
  create: MaterialCreateInput
  connect: MaterialWhereUniqueInput
}

type Address {
  id: ID!
  street: String
  door: String
  zip: String
  city: String
  province: String
  country: String
  extraFields: JSON
}

input AddressWhereUniqueInput {
  id: ID
}

input AddressWhereInput {
  AND: [AddressWhereInput!]
  OR: [AddressWhereInput!]
  NOT: [AddressWhereInput!]
  id: IDFilter
  street: StringFilter
  door: StringFilter
  zip: StringFilter
  city: StringFilter
  province: StringFilter
  country: StringFilter
}

input AddressOrderByInput {
  id: OrderDirection
  street: OrderDirection
  door: OrderDirection
  zip: OrderDirection
  city: OrderDirection
  province: OrderDirection
  country: OrderDirection
}

input AddressUpdateInput {
  street: String
  door: String
  zip: String
  city: String
  province: String
  country: String
  extraFields: JSON
}

input AddressUpdateArgs {
  where: AddressWhereUniqueInput!
  data: AddressUpdateInput!
}

input AddressCreateInput {
  street: String
  door: String
  zip: String
  city: String
  province: String
  country: String
  extraFields: JSON
}

type Payment {
  id: ID!
  value: Float
  document: Document
  out: Boolean
  isDeleted: Boolean
  creator: User
  reference: String
  type: String
  timestamp: DateTime
  extraFields: JSON
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  value: FloatFilter
  document: DocumentWhereInput
  isDeleted: BooleanFilter
  creator: UserWhereInput
  reference: StringFilter
  type: StringFilter
  timestamp: DateTimeNullableFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  value: OrderDirection
  isDeleted: OrderDirection
  reference: OrderDirection
  type: OrderDirection
  timestamp: OrderDirection
}

input PaymentUpdateInput {
  value: Float
  document: DocumentRelateToOneForUpdateInput
  isDeleted: Boolean
  creator: UserRelateToOneForUpdateInput
  reference: String
  type: String
  timestamp: DateTime
  extraFields: JSON
}

input DocumentRelateToOneForUpdateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
  disconnect: Boolean
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  value: Float
  document: DocumentRelateToOneForCreateInput
  isDeleted: Boolean
  creator: UserRelateToOneForCreateInput
  reference: String
  type: String
  timestamp: DateTime
  extraFields: JSON
}

input DocumentRelateToOneForCreateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
}

type User {
  id: ID!
  name: String
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: PasswordState
  operations(where: OperationWhereInput! = {}, orderBy: [OperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperationWhereUniqueInput): [Operation!]
  operationsCount(where: OperationWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  customerDocuments(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  customerDocumentsCount(where: DocumentWhereInput! = {}): Int
  customerMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  customerMovementsCount(where: StockMovementWhereInput! = {}): Int
  customerCompany: String
  customerTaxNumber: String
  customerTaxCenter: String
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
  extraFields: JSON
}

enum UserPermissionType {
  warranty
  price
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  username: StringFilter
  email: StringFilter
  isBlocked: BooleanFilter
  phone: StringFilter
  role: StringFilter
  ssid: StringFilter
  operations: OperationManyRelationFilter
  notes: NoteManyRelationFilter
  documents: DocumentManyRelationFilter
  customerDocuments: DocumentManyRelationFilter
  customerMovements: StockMovementManyRelationFilter
  customerCompany: StringFilter
  customerTaxNumber: StringFilter
  customerTaxCenter: StringFilter
  payments: PaymentManyRelationFilter
  addresses: AddressManyRelationFilter
  workOrders: WorkOrderManyRelationFilter
}

input OperationManyRelationFilter {
  every: OperationWhereInput
  some: OperationWhereInput
  none: OperationWhereInput
}

input NoteManyRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input StockMovementManyRelationFilter {
  every: StockMovementWhereInput
  some: StockMovementWhereInput
  none: StockMovementWhereInput
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input AddressManyRelationFilter {
  every: AddressWhereInput
  some: AddressWhereInput
  none: AddressWhereInput
}

input WorkOrderManyRelationFilter {
  every: WorkOrderWhereInput
  some: WorkOrderWhereInput
  none: WorkOrderWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isBlocked: OrderDirection
  phone: OrderDirection
  role: OrderDirection
  ssid: OrderDirection
  customerCompany: OrderDirection
  customerTaxNumber: OrderDirection
  customerTaxCenter: OrderDirection
}

input UserUpdateInput {
  name: String
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: String
  operations: OperationRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  customerDocuments: DocumentRelateToManyForUpdateInput
  customerMovements: StockMovementRelateToManyForUpdateInput
  customerCompany: String
  customerTaxNumber: String
  customerTaxCenter: String
  payments: PaymentRelateToManyForUpdateInput
  addresses: AddressRelateToManyForUpdateInput
  workOrders: WorkOrderRelateToManyForUpdateInput
  extraFields: JSON
}

input OperationRelateToManyForUpdateInput {
  disconnect: [OperationWhereUniqueInput!]
  set: [OperationWhereUniqueInput!]
  create: [OperationCreateInput!]
  connect: [OperationWhereUniqueInput!]
}

input NoteRelateToManyForUpdateInput {
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input StockMovementRelateToManyForUpdateInput {
  disconnect: [StockMovementWhereUniqueInput!]
  set: [StockMovementWhereUniqueInput!]
  create: [StockMovementCreateInput!]
  connect: [StockMovementWhereUniqueInput!]
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input AddressRelateToManyForUpdateInput {
  disconnect: [AddressWhereUniqueInput!]
  set: [AddressWhereUniqueInput!]
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input WorkOrderRelateToManyForUpdateInput {
  disconnect: [WorkOrderWhereUniqueInput!]
  set: [WorkOrderWhereUniqueInput!]
  create: [WorkOrderCreateInput!]
  connect: [WorkOrderWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: String
  operations: OperationRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  customerDocuments: DocumentRelateToManyForCreateInput
  customerMovements: StockMovementRelateToManyForCreateInput
  customerCompany: String
  customerTaxNumber: String
  customerTaxCenter: String
  payments: PaymentRelateToManyForCreateInput
  addresses: AddressRelateToManyForCreateInput
  workOrders: WorkOrderRelateToManyForCreateInput
  extraFields: JSON
}

input OperationRelateToManyForCreateInput {
  create: [OperationCreateInput!]
  connect: [OperationWhereUniqueInput!]
}

input NoteRelateToManyForCreateInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input StockMovementRelateToManyForCreateInput {
  create: [StockMovementCreateInput!]
  connect: [StockMovementWhereUniqueInput!]
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input AddressRelateToManyForCreateInput {
  create: [AddressCreateInput!]
  connect: [AddressWhereUniqueInput!]
}

input WorkOrderRelateToManyForCreateInput {
  create: [WorkOrderCreateInput!]
  connect: [WorkOrderWhereUniqueInput!]
}

type Note {
  id: ID!
  note: String
  creator: User
  extraFields: JSON
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  note: StringFilter
  creator: UserWhereInput
}

input NoteOrderByInput {
  id: OrderDirection
  note: OrderDirection
}

input NoteUpdateInput {
  note: String
  creator: UserRelateToOneForUpdateInput
  extraFields: JSON
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  note: String
  creator: UserRelateToOneForCreateInput
  extraFields: JSON
}

type File {
  id: ID!
  name: String
  url: String
  extraFields: JSON
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input FileUpdateInput {
  name: String
  url: String
  extraFields: JSON
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  url: String
  extraFields: JSON
}

type Document {
  id: ID!
  createdAt: DateTime
  total: Float
  type: String
  creator: User
  customer: User
  reduction: Float
  isDeleted: Boolean
  fromDocument: Document
  toDocument: Document
  products(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  productsCount(where: DocumentProductWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  number: String
  totalPaid: Float
  extraFields: JSON
}

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  type: StringFilter
  creator: UserWhereInput
  customer: UserWhereInput
  reduction: FloatNullableFilter
  isDeleted: BooleanFilter
  fromDocument: DocumentWhereInput
  toDocument: DocumentWhereInput
  products: DocumentProductManyRelationFilter
  payments: PaymentManyRelationFilter
  number: StringFilter
}

input DocumentProductManyRelationFilter {
  every: DocumentProductWhereInput
  some: DocumentProductWhereInput
  none: DocumentProductWhereInput
}

input DocumentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  type: OrderDirection
  reduction: OrderDirection
  isDeleted: OrderDirection
  number: OrderDirection
}

input DocumentUpdateInput {
  createdAt: DateTime
  type: String
  creator: UserRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  reduction: Float
  isDeleted: Boolean
  fromDocument: DocumentRelateToOneForUpdateInput
  toDocument: DocumentRelateToOneForUpdateInput
  products: DocumentProductRelateToManyForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  number: String
  extraFields: JSON
}

input DocumentProductRelateToManyForUpdateInput {
  disconnect: [DocumentProductWhereUniqueInput!]
  set: [DocumentProductWhereUniqueInput!]
  create: [DocumentProductCreateInput!]
  connect: [DocumentProductWhereUniqueInput!]
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  createdAt: DateTime
  type: String
  creator: UserRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  reduction: Float
  isDeleted: Boolean
  fromDocument: DocumentRelateToOneForCreateInput
  toDocument: DocumentRelateToOneForCreateInput
  products: DocumentProductRelateToManyForCreateInput
  payments: PaymentRelateToManyForCreateInput
  number: String
  extraFields: JSON
}

input DocumentProductRelateToManyForCreateInput {
  create: [DocumentProductCreateInput!]
  connect: [DocumentProductWhereUniqueInput!]
}

type DocumentProduct {
  id: ID!
  amount: Float
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  product: Material
  price: Float
  reduction: Float
  total: Float
  document: Document
  extraFields: JSON
}

input DocumentProductWhereUniqueInput {
  id: ID
}

input DocumentProductWhereInput {
  AND: [DocumentProductWhereInput!]
  OR: [DocumentProductWhereInput!]
  NOT: [DocumentProductWhereInput!]
  id: IDFilter
  amount: FloatFilter
  stockMovements: StockMovementManyRelationFilter
  product: MaterialWhereInput
  price: FloatFilter
  reduction: FloatNullableFilter
  document: DocumentWhereInput
}

input DocumentProductOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  price: OrderDirection
  reduction: OrderDirection
}

input DocumentProductUpdateInput {
  amount: Float
  stockMovements: StockMovementRelateToManyForUpdateInput
  product: MaterialRelateToOneForUpdateInput
  price: Float
  reduction: Float
  document: DocumentRelateToOneForUpdateInput
  extraFields: JSON
}

input DocumentProductUpdateArgs {
  where: DocumentProductWhereUniqueInput!
  data: DocumentProductUpdateInput!
}

input DocumentProductCreateInput {
  amount: Float
  stockMovements: StockMovementRelateToManyForCreateInput
  product: MaterialRelateToOneForCreateInput
  price: Float
  reduction: Float
  document: DocumentRelateToOneForCreateInput
  extraFields: JSON
}

type AssemblyComponent {
  id: ID!
  name: String
  description: String
  amount: Int
  assembly: Material
  material: Material
  extraFields: JSON
}

input AssemblyComponentWhereUniqueInput {
  id: ID
}

input AssemblyComponentWhereInput {
  AND: [AssemblyComponentWhereInput!]
  OR: [AssemblyComponentWhereInput!]
  NOT: [AssemblyComponentWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  amount: IntNullableFilter
  assembly: MaterialWhereInput
  material: MaterialWhereInput
}

input AssemblyComponentOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  amount: OrderDirection
}

input AssemblyComponentUpdateInput {
  name: String
  description: String
  amount: Int
  assembly: MaterialRelateToOneForUpdateInput
  material: MaterialRelateToOneForUpdateInput
  extraFields: JSON
}

input AssemblyComponentUpdateArgs {
  where: AssemblyComponentWhereUniqueInput!
  data: AssemblyComponentUpdateInput!
}

input AssemblyComponentCreateInput {
  name: String
  description: String
  amount: Int
  assembly: MaterialRelateToOneForCreateInput
  material: MaterialRelateToOneForCreateInput
  extraFields: JSON
}

type Material {
  id: ID!
  name: String
  components(where: AssemblyComponentWhereInput! = {}, orderBy: [AssemblyComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyComponentWhereUniqueInput): [AssemblyComponent!]
  componentsCount(where: AssemblyComponentWhereInput! = {}): Int
  assemblyComponents(where: AssemblyComponentWhereInput! = {}, orderBy: [AssemblyComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyComponentWhereUniqueInput): [AssemblyComponent!]
  assemblyComponentsCount(where: AssemblyComponentWhereInput! = {}): Int
  description: String
  price: Float
  currentStock: Int
  status: String
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
  code: String
  ean: String
  brand: Brand
  suppliers(where: SupplierWhereInput! = {}, orderBy: [SupplierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SupplierWhereUniqueInput): [Supplier!]
  suppliersCount(where: SupplierWhereInput! = {}): Int
  pricedBy: String
  type: String
  operations(where: OperationWhereInput! = {}, orderBy: [OperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperationWhereUniqueInput): [Operation!]
  operationsCount(where: OperationWhereInput! = {}): Int
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  documentProducts(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  documentProductsCount(where: DocumentProductWhereInput! = {}): Int
  extraFields: JSON
}

input MaterialWhereUniqueInput {
  id: ID
}

input MaterialWhereInput {
  AND: [MaterialWhereInput!]
  OR: [MaterialWhereInput!]
  NOT: [MaterialWhereInput!]
  id: IDFilter
  name: StringFilter
  components: AssemblyComponentManyRelationFilter
  assemblyComponents: AssemblyComponentManyRelationFilter
  description: StringFilter
  price: FloatFilter
  status: StringFilter
  files: FileManyRelationFilter
  workOrders: WorkOrderManyRelationFilter
  code: StringFilter
  ean: StringFilter
  brand: BrandWhereInput
  suppliers: SupplierManyRelationFilter
  pricedBy: StringFilter
  type: StringFilter
  operations: OperationManyRelationFilter
  stockMovements: StockMovementManyRelationFilter
  documentProducts: DocumentProductManyRelationFilter
}

input AssemblyComponentManyRelationFilter {
  every: AssemblyComponentWhereInput
  some: AssemblyComponentWhereInput
  none: AssemblyComponentWhereInput
}

input SupplierManyRelationFilter {
  every: SupplierWhereInput
  some: SupplierWhereInput
  none: SupplierWhereInput
}

input MaterialOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  status: OrderDirection
  code: OrderDirection
  ean: OrderDirection
  pricedBy: OrderDirection
  type: OrderDirection
}

input MaterialUpdateInput {
  name: String
  components: AssemblyComponentRelateToManyForUpdateInput
  assemblyComponents: AssemblyComponentRelateToManyForUpdateInput
  description: String
  price: Float
  status: String
  files: FileRelateToManyForUpdateInput
  workOrders: WorkOrderRelateToManyForUpdateInput
  code: String
  ean: String
  brand: BrandRelateToOneForUpdateInput
  suppliers: SupplierRelateToManyForUpdateInput
  pricedBy: String
  type: String
  operations: OperationRelateToManyForUpdateInput
  stockMovements: StockMovementRelateToManyForUpdateInput
  documentProducts: DocumentProductRelateToManyForUpdateInput
  extraFields: JSON
}

input AssemblyComponentRelateToManyForUpdateInput {
  disconnect: [AssemblyComponentWhereUniqueInput!]
  set: [AssemblyComponentWhereUniqueInput!]
  create: [AssemblyComponentCreateInput!]
  connect: [AssemblyComponentWhereUniqueInput!]
}

input BrandRelateToOneForUpdateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
  disconnect: Boolean
}

input SupplierRelateToManyForUpdateInput {
  disconnect: [SupplierWhereUniqueInput!]
  set: [SupplierWhereUniqueInput!]
  create: [SupplierCreateInput!]
  connect: [SupplierWhereUniqueInput!]
}

input MaterialUpdateArgs {
  where: MaterialWhereUniqueInput!
  data: MaterialUpdateInput!
}

input MaterialCreateInput {
  name: String
  components: AssemblyComponentRelateToManyForCreateInput
  assemblyComponents: AssemblyComponentRelateToManyForCreateInput
  description: String
  price: Float
  status: String
  files: FileRelateToManyForCreateInput
  workOrders: WorkOrderRelateToManyForCreateInput
  code: String
  ean: String
  brand: BrandRelateToOneForCreateInput
  suppliers: SupplierRelateToManyForCreateInput
  pricedBy: String
  type: String
  operations: OperationRelateToManyForCreateInput
  stockMovements: StockMovementRelateToManyForCreateInput
  documentProducts: DocumentProductRelateToManyForCreateInput
  extraFields: JSON
}

input AssemblyComponentRelateToManyForCreateInput {
  create: [AssemblyComponentCreateInput!]
  connect: [AssemblyComponentWhereUniqueInput!]
}

input BrandRelateToOneForCreateInput {
  create: BrandCreateInput
  connect: BrandWhereUniqueInput
}

input SupplierRelateToManyForCreateInput {
  create: [SupplierCreateInput!]
  connect: [SupplierWhereUniqueInput!]
}

type Storage {
  id: ID!
  name: String
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  extraFields: JSON
}

input StorageWhereUniqueInput {
  id: ID
}

input StorageWhereInput {
  AND: [StorageWhereInput!]
  OR: [StorageWhereInput!]
  NOT: [StorageWhereInput!]
  id: IDFilter
  name: StringFilter
  stockMovements: StockMovementManyRelationFilter
}

input StorageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StorageUpdateInput {
  name: String
  stockMovements: StockMovementRelateToManyForUpdateInput
  extraFields: JSON
}

input StorageUpdateArgs {
  where: StorageWhereUniqueInput!
  data: StorageUpdateInput!
}

input StorageCreateInput {
  name: String
  stockMovements: StockMovementRelateToManyForCreateInput
  extraFields: JSON
}

type StockMovement {
  id: ID!
  material: Material
  storage: Storage
  amount: Float
  movementType: String
  documentProduct: DocumentProduct
  note: String
  customer: User
  date: DateTime
  createdAt: DateTime
  extraFields: JSON
}

input StockMovementWhereUniqueInput {
  id: ID
}

input StockMovementWhereInput {
  AND: [StockMovementWhereInput!]
  OR: [StockMovementWhereInput!]
  NOT: [StockMovementWhereInput!]
  id: IDFilter
  material: MaterialWhereInput
  storage: StorageWhereInput
  amount: FloatFilter
  movementType: StringFilter
  documentProduct: DocumentProductWhereInput
  note: StringFilter
  customer: UserWhereInput
  date: DateTimeNullableFilter
  createdAt: DateTimeNullableFilter
}

input StockMovementOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  movementType: OrderDirection
  note: OrderDirection
  date: OrderDirection
  createdAt: OrderDirection
}

input StockMovementUpdateInput {
  material: MaterialRelateToOneForUpdateInput
  storage: StorageRelateToOneForUpdateInput
  amount: Float
  movementType: String
  documentProduct: DocumentProductRelateToOneForUpdateInput
  note: String
  customer: UserRelateToOneForUpdateInput
  date: DateTime
  createdAt: DateTime
  extraFields: JSON
}

input StorageRelateToOneForUpdateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
  disconnect: Boolean
}

input DocumentProductRelateToOneForUpdateInput {
  create: DocumentProductCreateInput
  connect: DocumentProductWhereUniqueInput
  disconnect: Boolean
}

input StockMovementUpdateArgs {
  where: StockMovementWhereUniqueInput!
  data: StockMovementUpdateInput!
}

input StockMovementCreateInput {
  material: MaterialRelateToOneForCreateInput
  storage: StorageRelateToOneForCreateInput
  amount: Float
  movementType: String
  documentProduct: DocumentProductRelateToOneForCreateInput
  note: String
  customer: UserRelateToOneForCreateInput
  date: DateTime
  createdAt: DateTime
  extraFields: JSON
}

input StorageRelateToOneForCreateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
}

input DocumentProductRelateToOneForCreateInput {
  create: DocumentProductCreateInput
  connect: DocumentProductWhereUniqueInput
}

type Supplier {
  id: ID!
  name: String
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  materialsCount(where: MaterialWhereInput! = {}): Int
  extraFields: JSON
}

input SupplierWhereUniqueInput {
  id: ID
}

input SupplierWhereInput {
  AND: [SupplierWhereInput!]
  OR: [SupplierWhereInput!]
  NOT: [SupplierWhereInput!]
  id: IDFilter
  name: StringFilter
  materials: MaterialManyRelationFilter
}

input SupplierOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input SupplierUpdateInput {
  name: String
  materials: MaterialRelateToManyForUpdateInput
  extraFields: JSON
}

input SupplierUpdateArgs {
  where: SupplierWhereUniqueInput!
  data: SupplierUpdateInput!
}

input SupplierCreateInput {
  name: String
  materials: MaterialRelateToManyForCreateInput
  extraFields: JSON
}

type Brand {
  id: ID!
  name: String
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  materialsCount(where: MaterialWhereInput! = {}): Int
  extraFields: JSON
}

input BrandWhereUniqueInput {
  id: ID
}

input BrandWhereInput {
  AND: [BrandWhereInput!]
  OR: [BrandWhereInput!]
  NOT: [BrandWhereInput!]
  id: IDFilter
  name: StringFilter
  materials: MaterialManyRelationFilter
}

input BrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input BrandUpdateInput {
  name: String
  materials: MaterialRelateToManyForUpdateInput
  extraFields: JSON
}

input BrandUpdateArgs {
  where: BrandWhereUniqueInput!
  data: BrandUpdateInput!
}

input BrandCreateInput {
  name: String
  materials: MaterialRelateToManyForCreateInput
  extraFields: JSON
}

type Notification {
  id: ID!
  date: DateTime
  message: String
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

enum NotificationNotifyRoleType {
  admin
  customer
  employee
  manager
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  message: StringFilter
  link: StringFilter
  handled: BooleanFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  date: OrderDirection
  message: OrderDirection
  link: OrderDirection
  handled: OrderDirection
}

input NotificationUpdateInput {
  date: DateTime
  message: String
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  date: DateTime
  message: String
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

type SoftwareVersion {
  id: ID!
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

input SoftwareVersionWhereUniqueInput {
  id: ID
}

input SoftwareVersionWhereInput {
  AND: [SoftwareVersionWhereInput!]
  OR: [SoftwareVersionWhereInput!]
  NOT: [SoftwareVersionWhereInput!]
  id: IDFilter
  version: IntFilter
  iosLink: StringFilter
  androidLink: StringFilter
  webLink: StringFilter
  windowsLink: StringFilter
  macLink: StringFilter
  date: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input SoftwareVersionOrderByInput {
  id: OrderDirection
  version: OrderDirection
  iosLink: OrderDirection
  androidLink: OrderDirection
  webLink: OrderDirection
  windowsLink: OrderDirection
  macLink: OrderDirection
  date: OrderDirection
}

input SoftwareVersionUpdateInput {
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

input SoftwareVersionUpdateArgs {
  where: SoftwareVersionWhereUniqueInput! = {id: 1}
  data: SoftwareVersionUpdateInput!
}

input SoftwareVersionCreateInput {
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

type Config {
  id: ID!
  defaultCurrency: String
  extraFieldsProduct: JSON
}

input ConfigWhereUniqueInput {
  id: ID
}

input ConfigWhereInput {
  AND: [ConfigWhereInput!]
  OR: [ConfigWhereInput!]
  NOT: [ConfigWhereInput!]
  id: IDFilter
  defaultCurrency: StringFilter
}

input ConfigOrderByInput {
  id: OrderDirection
  defaultCurrency: OrderDirection
}

input ConfigUpdateInput {
  defaultCurrency: String
  extraFieldsProduct: JSON
}

input ConfigUpdateArgs {
  where: ConfigWhereUniqueInput! = {id: 1}
  data: ConfigUpdateInput!
}

input ConfigCreateInput {
  defaultCurrency: String
  extraFieldsProduct: JSON
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createWorkOrder(data: WorkOrderCreateInput!): WorkOrder
  createWorkOrders(data: [WorkOrderCreateInput!]!): [WorkOrder]
  updateWorkOrder(where: WorkOrderWhereUniqueInput!, data: WorkOrderUpdateInput!): WorkOrder
  updateWorkOrders(data: [WorkOrderUpdateArgs!]!): [WorkOrder]
  deleteWorkOrder(where: WorkOrderWhereUniqueInput!): WorkOrder
  deleteWorkOrders(where: [WorkOrderWhereUniqueInput!]!): [WorkOrder]
  createWorkOrderOperation(data: WorkOrderOperationCreateInput!): WorkOrderOperation
  createWorkOrderOperations(data: [WorkOrderOperationCreateInput!]!): [WorkOrderOperation]
  updateWorkOrderOperation(where: WorkOrderOperationWhereUniqueInput!, data: WorkOrderOperationUpdateInput!): WorkOrderOperation
  updateWorkOrderOperations(data: [WorkOrderOperationUpdateArgs!]!): [WorkOrderOperation]
  deleteWorkOrderOperation(where: WorkOrderOperationWhereUniqueInput!): WorkOrderOperation
  deleteWorkOrderOperations(where: [WorkOrderOperationWhereUniqueInput!]!): [WorkOrderOperation]
  createOperation(data: OperationCreateInput!): Operation
  createOperations(data: [OperationCreateInput!]!): [Operation]
  updateOperation(where: OperationWhereUniqueInput!, data: OperationUpdateInput!): Operation
  updateOperations(data: [OperationUpdateArgs!]!): [Operation]
  deleteOperation(where: OperationWhereUniqueInput!): Operation
  deleteOperations(where: [OperationWhereUniqueInput!]!): [Operation]
  createAddress(data: AddressCreateInput!): Address
  createAddresses(data: [AddressCreateInput!]!): [Address]
  updateAddress(where: AddressWhereUniqueInput!, data: AddressUpdateInput!): Address
  updateAddresses(data: [AddressUpdateArgs!]!): [Address]
  deleteAddress(where: AddressWhereUniqueInput!): Address
  deleteAddresses(where: [AddressWhereUniqueInput!]!): [Address]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentProduct(data: DocumentProductCreateInput!): DocumentProduct
  createDocumentProducts(data: [DocumentProductCreateInput!]!): [DocumentProduct]
  updateDocumentProduct(where: DocumentProductWhereUniqueInput!, data: DocumentProductUpdateInput!): DocumentProduct
  updateDocumentProducts(data: [DocumentProductUpdateArgs!]!): [DocumentProduct]
  deleteDocumentProduct(where: DocumentProductWhereUniqueInput!): DocumentProduct
  deleteDocumentProducts(where: [DocumentProductWhereUniqueInput!]!): [DocumentProduct]
  createAssemblyComponent(data: AssemblyComponentCreateInput!): AssemblyComponent
  createAssemblyComponents(data: [AssemblyComponentCreateInput!]!): [AssemblyComponent]
  updateAssemblyComponent(where: AssemblyComponentWhereUniqueInput!, data: AssemblyComponentUpdateInput!): AssemblyComponent
  updateAssemblyComponents(data: [AssemblyComponentUpdateArgs!]!): [AssemblyComponent]
  deleteAssemblyComponent(where: AssemblyComponentWhereUniqueInput!): AssemblyComponent
  deleteAssemblyComponents(where: [AssemblyComponentWhereUniqueInput!]!): [AssemblyComponent]
  createMaterial(data: MaterialCreateInput!): Material
  createMaterials(data: [MaterialCreateInput!]!): [Material]
  updateMaterial(where: MaterialWhereUniqueInput!, data: MaterialUpdateInput!): Material
  updateMaterials(data: [MaterialUpdateArgs!]!): [Material]
  deleteMaterial(where: MaterialWhereUniqueInput!): Material
  deleteMaterials(where: [MaterialWhereUniqueInput!]!): [Material]
  createStorage(data: StorageCreateInput!): Storage
  createStorages(data: [StorageCreateInput!]!): [Storage]
  updateStorage(where: StorageWhereUniqueInput!, data: StorageUpdateInput!): Storage
  updateStorages(data: [StorageUpdateArgs!]!): [Storage]
  deleteStorage(where: StorageWhereUniqueInput!): Storage
  deleteStorages(where: [StorageWhereUniqueInput!]!): [Storage]
  createStockMovement(data: StockMovementCreateInput!): StockMovement
  createStockMovements(data: [StockMovementCreateInput!]!): [StockMovement]
  updateStockMovement(where: StockMovementWhereUniqueInput!, data: StockMovementUpdateInput!): StockMovement
  updateStockMovements(data: [StockMovementUpdateArgs!]!): [StockMovement]
  deleteStockMovement(where: StockMovementWhereUniqueInput!): StockMovement
  deleteStockMovements(where: [StockMovementWhereUniqueInput!]!): [StockMovement]
  createSupplier(data: SupplierCreateInput!): Supplier
  createSuppliers(data: [SupplierCreateInput!]!): [Supplier]
  updateSupplier(where: SupplierWhereUniqueInput!, data: SupplierUpdateInput!): Supplier
  updateSuppliers(data: [SupplierUpdateArgs!]!): [Supplier]
  deleteSupplier(where: SupplierWhereUniqueInput!): Supplier
  deleteSuppliers(where: [SupplierWhereUniqueInput!]!): [Supplier]
  createBrand(data: BrandCreateInput!): Brand
  createBrands(data: [BrandCreateInput!]!): [Brand]
  updateBrand(where: BrandWhereUniqueInput!, data: BrandUpdateInput!): Brand
  updateBrands(data: [BrandUpdateArgs!]!): [Brand]
  deleteBrand(where: BrandWhereUniqueInput!): Brand
  deleteBrands(where: [BrandWhereUniqueInput!]!): [Brand]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createSoftwareVersion(data: SoftwareVersionCreateInput!): SoftwareVersion
  createSoftwareVersions(data: [SoftwareVersionCreateInput!]!): [SoftwareVersion]
  updateSoftwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}, data: SoftwareVersionUpdateInput!): SoftwareVersion
  updateSoftwareVersions(data: [SoftwareVersionUpdateArgs!]!): [SoftwareVersion]
  deleteSoftwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}): SoftwareVersion
  deleteSoftwareVersions(where: [SoftwareVersionWhereUniqueInput!]!): [SoftwareVersion]
  createConfig(data: ConfigCreateInput!): Config
  createConfigs(data: [ConfigCreateInput!]!): [Config]
  updateConfig(where: ConfigWhereUniqueInput! = {id: 1}, data: ConfigUpdateInput!): Config
  updateConfigs(data: [ConfigUpdateArgs!]!): [Config]
  deleteConfig(where: ConfigWhereUniqueInput! = {id: 1}): Config
  deleteConfigs(where: [ConfigWhereUniqueInput!]!): [Config]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  username: String
  email: String
  role: String
  password: String
}

type Query {
  workOrder(where: WorkOrderWhereUniqueInput!): WorkOrder
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
  workOrderOperation(where: WorkOrderOperationWhereUniqueInput!): WorkOrderOperation
  workOrderOperations(where: WorkOrderOperationWhereInput! = {}, orderBy: [WorkOrderOperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderOperationWhereUniqueInput): [WorkOrderOperation!]
  workOrderOperationsCount(where: WorkOrderOperationWhereInput! = {}): Int
  operation(where: OperationWhereUniqueInput!): Operation
  operations(where: OperationWhereInput! = {}, orderBy: [OperationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: OperationWhereUniqueInput): [Operation!]
  operationsCount(where: OperationWhereInput! = {}): Int
  address(where: AddressWhereUniqueInput!): Address
  addresses(where: AddressWhereInput! = {}, orderBy: [AddressOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AddressWhereUniqueInput): [Address!]
  addressesCount(where: AddressWhereInput! = {}): Int
  payment(where: PaymentWhereUniqueInput!): Payment
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  usersCount(where: UserWhereInput! = {}): Int
  note(where: NoteWhereUniqueInput!): Note
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  file(where: FileWhereUniqueInput!): File
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  filesCount(where: FileWhereInput! = {}): Int
  document(where: DocumentWhereUniqueInput!): Document
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentProduct(where: DocumentProductWhereUniqueInput!): DocumentProduct
  documentProducts(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  documentProductsCount(where: DocumentProductWhereInput! = {}): Int
  assemblyComponent(where: AssemblyComponentWhereUniqueInput!): AssemblyComponent
  assemblyComponents(where: AssemblyComponentWhereInput! = {}, orderBy: [AssemblyComponentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: AssemblyComponentWhereUniqueInput): [AssemblyComponent!]
  assemblyComponentsCount(where: AssemblyComponentWhereInput! = {}): Int
  material(where: MaterialWhereUniqueInput!): Material
  materials(where: MaterialWhereInput! = {}, orderBy: [MaterialOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: MaterialWhereUniqueInput): [Material!]
  materialsCount(where: MaterialWhereInput! = {}): Int
  storage(where: StorageWhereUniqueInput!): Storage
  storages(where: StorageWhereInput! = {}, orderBy: [StorageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StorageWhereUniqueInput): [Storage!]
  storagesCount(where: StorageWhereInput! = {}): Int
  stockMovement(where: StockMovementWhereUniqueInput!): StockMovement
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  supplier(where: SupplierWhereUniqueInput!): Supplier
  suppliers(where: SupplierWhereInput! = {}, orderBy: [SupplierOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SupplierWhereUniqueInput): [Supplier!]
  suppliersCount(where: SupplierWhereInput! = {}): Int
  brand(where: BrandWhereUniqueInput!): Brand
  brands(where: BrandWhereInput! = {}, orderBy: [BrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: BrandWhereUniqueInput): [Brand!]
  brandsCount(where: BrandWhereInput! = {}): Int
  notification(where: NotificationWhereUniqueInput!): Notification
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  softwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}): SoftwareVersion
  softwareVersions(where: SoftwareVersionWhereInput! = {id: {equals: 1}}, orderBy: [SoftwareVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SoftwareVersionWhereUniqueInput): [SoftwareVersion!]
  softwareVersionsCount(where: SoftwareVersionWhereInput! = {id: {equals: 1}}): Int
  config(where: ConfigWhereUniqueInput! = {id: 1}): Config
  configs(where: ConfigWhereInput! = {id: {equals: 1}}, orderBy: [ConfigOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ConfigWhereUniqueInput): [Config!]
  configsCount(where: ConfigWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  graphql: KeystoneAdminUIGraphQL!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUIGraphQL {
  names: KeystoneAdminUIGraphQLNames!
}

type KeystoneAdminUIGraphQLNames {
  outputTypeName: String!
  whereInputName: String!
  whereUniqueInputName: String!
  createInputName: String!
  createMutationName: String!
  createManyMutationName: String!
  relateToOneForCreateInputName: String!
  relateToManyForCreateInputName: String!
  itemQueryName: String!
  listOrderName: String!
  listQueryCountName: String!
  listQueryName: String!
  updateInputName: String!
  updateMutationName: String!
  updateManyInputName: String!
  updateManyMutationName: String!
  relateToOneForUpdateInputName: String!
  relateToManyForUpdateInputName: String!
  deleteMutationName: String!
  deleteManyMutationName: String!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
