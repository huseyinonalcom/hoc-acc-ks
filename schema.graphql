# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  firstname: String
  lastname: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: PasswordState
  qcWorkOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  qcWorkOrdersCount(where: WorkOrderWhereInput! = {}): Int
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
  clientOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  clientOrdersCount(where: WorkOrderWhereInput! = {}): Int
  applicationsToApply(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsToApplyCount(where: ApplicationWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  documentsCount(where: DocumentWhereInput! = {}): Int
  customerDocuments(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  customerDocumentsCount(where: DocumentWhereInput! = {}): Int
  customerMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  customerMovementsCount(where: StockMovementWhereInput! = {}): Int
}

enum UserPermissionType {
  warranty
  price
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  username: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  username: StringFilter
  email: StringFilter
  isBlocked: BooleanFilter
  phone: StringFilter
  firstname: StringFilter
  lastname: StringFilter
  role: StringFilter
  ssid: StringFilter
  qcWorkOrders: WorkOrderManyRelationFilter
  workOrders: WorkOrderManyRelationFilter
  clientOrders: WorkOrderManyRelationFilter
  applicationsToApply: ApplicationManyRelationFilter
  applications: ApplicationManyRelationFilter
  notes: NoteManyRelationFilter
  documents: DocumentManyRelationFilter
  customerDocuments: DocumentManyRelationFilter
  customerMovements: StockMovementManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input WorkOrderManyRelationFilter {
  every: WorkOrderWhereInput
  some: WorkOrderWhereInput
  none: WorkOrderWhereInput
}

input ApplicationManyRelationFilter {
  every: ApplicationWhereInput
  some: ApplicationWhereInput
  none: ApplicationWhereInput
}

input NoteManyRelationFilter {
  every: NoteWhereInput
  some: NoteWhereInput
  none: NoteWhereInput
}

input DocumentManyRelationFilter {
  every: DocumentWhereInput
  some: DocumentWhereInput
  none: DocumentWhereInput
}

input StockMovementManyRelationFilter {
  every: StockMovementWhereInput
  some: StockMovementWhereInput
  none: StockMovementWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  username: OrderDirection
  email: OrderDirection
  isBlocked: OrderDirection
  phone: OrderDirection
  firstname: OrderDirection
  lastname: OrderDirection
  role: OrderDirection
  ssid: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  firstname: String
  lastname: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: String
  qcWorkOrders: WorkOrderRelateToManyForUpdateInput
  workOrders: WorkOrderRelateToManyForUpdateInput
  clientOrders: WorkOrderRelateToManyForUpdateInput
  applicationsToApply: ApplicationRelateToManyForUpdateInput
  applications: ApplicationRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
  documents: DocumentRelateToManyForUpdateInput
  customerDocuments: DocumentRelateToManyForUpdateInput
  customerMovements: StockMovementRelateToManyForUpdateInput
}

input WorkOrderRelateToManyForUpdateInput {
  disconnect: [WorkOrderWhereUniqueInput!]
  set: [WorkOrderWhereUniqueInput!]
  create: [WorkOrderCreateInput!]
  connect: [WorkOrderWhereUniqueInput!]
}

input ApplicationRelateToManyForUpdateInput {
  disconnect: [ApplicationWhereUniqueInput!]
  set: [ApplicationWhereUniqueInput!]
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input NoteRelateToManyForUpdateInput {
  disconnect: [NoteWhereUniqueInput!]
  set: [NoteWhereUniqueInput!]
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input DocumentRelateToManyForUpdateInput {
  disconnect: [DocumentWhereUniqueInput!]
  set: [DocumentWhereUniqueInput!]
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input StockMovementRelateToManyForUpdateInput {
  disconnect: [StockMovementWhereUniqueInput!]
  set: [StockMovementWhereUniqueInput!]
  create: [StockMovementCreateInput!]
  connect: [StockMovementWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  username: String
  email: String
  isBlocked: Boolean
  phone: String
  firstname: String
  lastname: String
  role: String
  permissions: [UserPermissionType!]
  ssid: String
  password: String
  qcWorkOrders: WorkOrderRelateToManyForCreateInput
  workOrders: WorkOrderRelateToManyForCreateInput
  clientOrders: WorkOrderRelateToManyForCreateInput
  applicationsToApply: ApplicationRelateToManyForCreateInput
  applications: ApplicationRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
  documents: DocumentRelateToManyForCreateInput
  customerDocuments: DocumentRelateToManyForCreateInput
  customerMovements: StockMovementRelateToManyForCreateInput
}

input WorkOrderRelateToManyForCreateInput {
  create: [WorkOrderCreateInput!]
  connect: [WorkOrderWhereUniqueInput!]
}

input ApplicationRelateToManyForCreateInput {
  create: [ApplicationCreateInput!]
  connect: [ApplicationWhereUniqueInput!]
}

input NoteRelateToManyForCreateInput {
  create: [NoteCreateInput!]
  connect: [NoteWhereUniqueInput!]
}

input DocumentRelateToManyForCreateInput {
  create: [DocumentCreateInput!]
  connect: [DocumentWhereUniqueInput!]
}

input StockMovementRelateToManyForCreateInput {
  create: [StockMovementCreateInput!]
  connect: [StockMovementWhereUniqueInput!]
}

type Note {
  id: ID!
  note: String
  workOrder: WorkOrder
  creator: User
}

input NoteWhereUniqueInput {
  id: ID
}

input NoteWhereInput {
  AND: [NoteWhereInput!]
  OR: [NoteWhereInput!]
  NOT: [NoteWhereInput!]
  id: IDFilter
  note: StringFilter
  workOrder: WorkOrderWhereInput
  creator: UserWhereInput
}

input NoteOrderByInput {
  id: OrderDirection
  note: OrderDirection
}

input NoteUpdateInput {
  note: String
  workOrder: WorkOrderRelateToOneForUpdateInput
  creator: UserRelateToOneForUpdateInput
}

input WorkOrderRelateToOneForUpdateInput {
  create: WorkOrderCreateInput
  connect: WorkOrderWhereUniqueInput
  disconnect: Boolean
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input NoteUpdateArgs {
  where: NoteWhereUniqueInput!
  data: NoteUpdateInput!
}

input NoteCreateInput {
  note: String
  workOrder: WorkOrderRelateToOneForCreateInput
  creator: UserRelateToOneForCreateInput
}

input WorkOrderRelateToOneForCreateInput {
  create: WorkOrderCreateInput
  connect: WorkOrderWhereUniqueInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type File {
  id: ID!
  name: String
  url: String
  application: Application
  workOrder: WorkOrder
  product: Product
}

input FileWhereUniqueInput {
  id: ID
}

input FileWhereInput {
  AND: [FileWhereInput!]
  OR: [FileWhereInput!]
  NOT: [FileWhereInput!]
  id: IDFilter
  name: StringFilter
  url: StringFilter
  application: ApplicationWhereInput
  workOrder: WorkOrderWhereInput
  product: ProductWhereInput
}

input FileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  url: OrderDirection
}

input FileUpdateInput {
  name: String
  url: String
  application: ApplicationRelateToOneForUpdateInput
  workOrder: WorkOrderRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
}

input ApplicationRelateToOneForUpdateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
  disconnect: Boolean
}

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input FileUpdateArgs {
  where: FileWhereUniqueInput!
  data: FileUpdateInput!
}

input FileCreateInput {
  name: String
  url: String
  application: ApplicationRelateToOneForCreateInput
  workOrder: WorkOrderRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
}

input ApplicationRelateToOneForCreateInput {
  create: ApplicationCreateInput
  connect: ApplicationWhereUniqueInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

type Document {
  id: ID!
  createdAt: DateTime
  total: Float
  documentType: String
  creator: User
  customer: User
  reduction: Float
  isDeleted: Boolean
  number: String
  invoiced: Boolean
  products(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  productsCount(where: DocumentProductWhereInput! = {}): Int
  paymentPlan: PaymentPlan
}

scalar DateTime @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input DocumentWhereUniqueInput {
  id: ID
}

input DocumentWhereInput {
  AND: [DocumentWhereInput!]
  OR: [DocumentWhereInput!]
  NOT: [DocumentWhereInput!]
  id: IDFilter
  createdAt: DateTimeNullableFilter
  documentType: StringFilter
  creator: UserWhereInput
  customer: UserWhereInput
  reduction: FloatNullableFilter
  isDeleted: BooleanFilter
  number: StringFilter
  invoiced: BooleanFilter
  products: DocumentProductManyRelationFilter
  paymentPlan: PaymentPlanWhereInput
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input FloatNullableFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatNullableFilter
}

input DocumentProductManyRelationFilter {
  every: DocumentProductWhereInput
  some: DocumentProductWhereInput
  none: DocumentProductWhereInput
}

input DocumentOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  documentType: OrderDirection
  reduction: OrderDirection
  isDeleted: OrderDirection
  number: OrderDirection
  invoiced: OrderDirection
}

input DocumentUpdateInput {
  createdAt: DateTime
  documentType: String
  creator: UserRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  reduction: Float
  isDeleted: Boolean
  number: String
  invoiced: Boolean
  products: DocumentProductRelateToManyForUpdateInput
  paymentPlan: PaymentPlanRelateToOneForUpdateInput
}

input DocumentProductRelateToManyForUpdateInput {
  disconnect: [DocumentProductWhereUniqueInput!]
  set: [DocumentProductWhereUniqueInput!]
  create: [DocumentProductCreateInput!]
  connect: [DocumentProductWhereUniqueInput!]
}

input PaymentPlanRelateToOneForUpdateInput {
  create: PaymentPlanCreateInput
  connect: PaymentPlanWhereUniqueInput
  disconnect: Boolean
}

input DocumentUpdateArgs {
  where: DocumentWhereUniqueInput!
  data: DocumentUpdateInput!
}

input DocumentCreateInput {
  createdAt: DateTime
  documentType: String
  creator: UserRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  reduction: Float
  isDeleted: Boolean
  number: String
  invoiced: Boolean
  products: DocumentProductRelateToManyForCreateInput
  paymentPlan: PaymentPlanRelateToOneForCreateInput
}

input DocumentProductRelateToManyForCreateInput {
  create: [DocumentProductCreateInput!]
  connect: [DocumentProductWhereUniqueInput!]
}

input PaymentPlanRelateToOneForCreateInput {
  create: PaymentPlanCreateInput
  connect: PaymentPlanWhereUniqueInput
}

type DocumentProduct {
  id: ID!
  amount: Float
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  product: Product
  price: Float
  total: Float
  document: Document
}

input DocumentProductWhereUniqueInput {
  id: ID
}

input DocumentProductWhereInput {
  AND: [DocumentProductWhereInput!]
  OR: [DocumentProductWhereInput!]
  NOT: [DocumentProductWhereInput!]
  id: IDFilter
  amount: FloatFilter
  stockMovements: StockMovementManyRelationFilter
  product: ProductWhereInput
  price: FloatFilter
  document: DocumentWhereInput
}

input FloatFilter {
  equals: Float
  in: [Float!]
  notIn: [Float!]
  lt: Float
  lte: Float
  gt: Float
  gte: Float
  not: FloatFilter
}

input DocumentProductOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  price: OrderDirection
}

input DocumentProductUpdateInput {
  amount: Float
  stockMovements: StockMovementRelateToManyForUpdateInput
  product: ProductRelateToOneForUpdateInput
  price: Float
  document: DocumentRelateToOneForUpdateInput
}

input DocumentRelateToOneForUpdateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
  disconnect: Boolean
}

input DocumentProductUpdateArgs {
  where: DocumentProductWhereUniqueInput!
  data: DocumentProductUpdateInput!
}

input DocumentProductCreateInput {
  amount: Float
  stockMovements: StockMovementRelateToManyForCreateInput
  product: ProductRelateToOneForCreateInput
  price: Float
  document: DocumentRelateToOneForCreateInput
}

input DocumentRelateToOneForCreateInput {
  create: DocumentCreateInput
  connect: DocumentWhereUniqueInput
}

type WorkOrder {
  id: ID!
  creator: User
  createdAt: DateTime
  images(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  imagesCount(where: FileWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  notesCount(where: NoteWhereInput! = {}): Int
  status: String
  reduction: Float
  paymentPlan: PaymentPlan
  qcDone: Boolean
  qcUser: User
  checkDate: DateTime
  checkDone: Boolean
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
  startedAt: String
  finishedAt: String
  car: Car
  customer: User
  value: Float
  total: Float
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
}

input WorkOrderWhereUniqueInput {
  id: ID
}

input WorkOrderWhereInput {
  AND: [WorkOrderWhereInput!]
  OR: [WorkOrderWhereInput!]
  NOT: [WorkOrderWhereInput!]
  id: IDFilter
  creator: UserWhereInput
  createdAt: DateTimeNullableFilter
  images: FileManyRelationFilter
  notes: NoteManyRelationFilter
  status: StringNullableFilter
  reduction: FloatNullableFilter
  paymentPlan: PaymentPlanWhereInput
  qcDone: BooleanFilter
  qcUser: UserWhereInput
  checkDate: DateTimeNullableFilter
  checkDone: BooleanFilter
  notifications: NotificationManyRelationFilter
  car: CarWhereInput
  customer: UserWhereInput
  applications: ApplicationManyRelationFilter
}

input FileManyRelationFilter {
  every: FileWhereInput
  some: FileWhereInput
  none: FileWhereInput
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: StringNullableFilter
}

input NotificationManyRelationFilter {
  every: NotificationWhereInput
  some: NotificationWhereInput
  none: NotificationWhereInput
}

input WorkOrderOrderByInput {
  id: OrderDirection
  createdAt: OrderDirection
  status: OrderDirection
  reduction: OrderDirection
  qcDone: OrderDirection
  checkDate: OrderDirection
  checkDone: OrderDirection
}

input WorkOrderUpdateInput {
  creator: UserRelateToOneForUpdateInput
  createdAt: DateTime
  images: FileRelateToManyForUpdateInput
  notes: NoteRelateToManyForUpdateInput
  status: String
  reduction: Float
  paymentPlan: PaymentPlanRelateToOneForUpdateInput
  qcDone: Boolean
  qcUser: UserRelateToOneForUpdateInput
  checkDate: DateTime
  checkDone: Boolean
  notifications: NotificationRelateToManyForUpdateInput
  car: CarRelateToOneForUpdateInput
  customer: UserRelateToOneForUpdateInput
  applications: ApplicationRelateToManyForUpdateInput
}

input FileRelateToManyForUpdateInput {
  disconnect: [FileWhereUniqueInput!]
  set: [FileWhereUniqueInput!]
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input NotificationRelateToManyForUpdateInput {
  disconnect: [NotificationWhereUniqueInput!]
  set: [NotificationWhereUniqueInput!]
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input CarRelateToOneForUpdateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
  disconnect: Boolean
}

input WorkOrderUpdateArgs {
  where: WorkOrderWhereUniqueInput!
  data: WorkOrderUpdateInput!
}

input WorkOrderCreateInput {
  creator: UserRelateToOneForCreateInput
  createdAt: DateTime
  images: FileRelateToManyForCreateInput
  notes: NoteRelateToManyForCreateInput
  status: String
  reduction: Float
  paymentPlan: PaymentPlanRelateToOneForCreateInput
  qcDone: Boolean
  qcUser: UserRelateToOneForCreateInput
  checkDate: DateTime
  checkDone: Boolean
  notifications: NotificationRelateToManyForCreateInput
  car: CarRelateToOneForCreateInput
  customer: UserRelateToOneForCreateInput
  applications: ApplicationRelateToManyForCreateInput
}

input FileRelateToManyForCreateInput {
  create: [FileCreateInput!]
  connect: [FileWhereUniqueInput!]
}

input NotificationRelateToManyForCreateInput {
  create: [NotificationCreateInput!]
  connect: [NotificationWhereUniqueInput!]
}

input CarRelateToOneForCreateInput {
  create: CarCreateInput
  connect: CarWhereUniqueInput
}

type Application {
  id: ID!
  workOrder: WorkOrder
  images(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  imagesCount(where: FileWhereInput! = {}): Int
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  price: Float
  amount: Float
  wastage: Float
  location: ApplicationLocation
  product: Product
  applicant: User
  creator: User
  type: ApplicationType
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
}

input ApplicationWhereUniqueInput {
  id: ID
}

input ApplicationWhereInput {
  AND: [ApplicationWhereInput!]
  OR: [ApplicationWhereInput!]
  NOT: [ApplicationWhereInput!]
  id: IDFilter
  workOrder: WorkOrderWhereInput
  images: FileManyRelationFilter
  startedAt: DateTimeNullableFilter
  finishedAt: DateTimeNullableFilter
  name: StringFilter
  description: StringFilter
  value: FloatFilter
  amount: FloatFilter
  wastage: FloatNullableFilter
  location: ApplicationLocationWhereInput
  product: ProductWhereInput
  applicant: UserWhereInput
  creator: UserWhereInput
  type: ApplicationTypeWhereInput
  stockMovements: StockMovementManyRelationFilter
}

input ApplicationOrderByInput {
  id: OrderDirection
  startedAt: OrderDirection
  finishedAt: OrderDirection
  name: OrderDirection
  description: OrderDirection
  value: OrderDirection
  amount: OrderDirection
  wastage: OrderDirection
}

input ApplicationUpdateInput {
  workOrder: WorkOrderRelateToOneForUpdateInput
  images: FileRelateToManyForUpdateInput
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  amount: Float
  wastage: Float
  location: ApplicationLocationRelateToOneForUpdateInput
  product: ProductRelateToOneForUpdateInput
  applicant: UserRelateToOneForUpdateInput
  creator: UserRelateToOneForUpdateInput
  type: ApplicationTypeRelateToOneForUpdateInput
  stockMovements: StockMovementRelateToManyForUpdateInput
}

input ApplicationLocationRelateToOneForUpdateInput {
  create: ApplicationLocationCreateInput
  connect: ApplicationLocationWhereUniqueInput
  disconnect: Boolean
}

input ApplicationTypeRelateToOneForUpdateInput {
  create: ApplicationTypeCreateInput
  connect: ApplicationTypeWhereUniqueInput
  disconnect: Boolean
}

input ApplicationUpdateArgs {
  where: ApplicationWhereUniqueInput!
  data: ApplicationUpdateInput!
}

input ApplicationCreateInput {
  workOrder: WorkOrderRelateToOneForCreateInput
  images: FileRelateToManyForCreateInput
  startedAt: DateTime
  finishedAt: DateTime
  name: String
  description: String
  value: Float
  amount: Float
  wastage: Float
  location: ApplicationLocationRelateToOneForCreateInput
  product: ProductRelateToOneForCreateInput
  applicant: UserRelateToOneForCreateInput
  creator: UserRelateToOneForCreateInput
  type: ApplicationTypeRelateToOneForCreateInput
  stockMovements: StockMovementRelateToManyForCreateInput
}

input ApplicationLocationRelateToOneForCreateInput {
  create: ApplicationLocationCreateInput
  connect: ApplicationLocationWhereUniqueInput
}

input ApplicationTypeRelateToOneForCreateInput {
  create: ApplicationTypeCreateInput
  connect: ApplicationTypeWhereUniqueInput
}

type ApplicationType {
  id: ID!
  name: String
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
  locations(where: ApplicationLocationWhereInput! = {}, orderBy: [ApplicationLocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationLocationWhereUniqueInput): [ApplicationLocation!]
  locationsCount(where: ApplicationLocationWhereInput! = {}): Int
}

input ApplicationTypeWhereUniqueInput {
  id: ID
}

input ApplicationTypeWhereInput {
  AND: [ApplicationTypeWhereInput!]
  OR: [ApplicationTypeWhereInput!]
  NOT: [ApplicationTypeWhereInput!]
  id: IDFilter
  name: StringFilter
  applications: ApplicationManyRelationFilter
  products: ProductManyRelationFilter
  locations: ApplicationLocationManyRelationFilter
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input ApplicationLocationManyRelationFilter {
  every: ApplicationLocationWhereInput
  some: ApplicationLocationWhereInput
  none: ApplicationLocationWhereInput
}

input ApplicationTypeOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ApplicationTypeUpdateInput {
  name: String
  applications: ApplicationRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
  locations: ApplicationLocationRelateToManyForUpdateInput
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ApplicationLocationRelateToManyForUpdateInput {
  disconnect: [ApplicationLocationWhereUniqueInput!]
  set: [ApplicationLocationWhereUniqueInput!]
  create: [ApplicationLocationCreateInput!]
  connect: [ApplicationLocationWhereUniqueInput!]
}

input ApplicationTypeUpdateArgs {
  where: ApplicationTypeWhereUniqueInput!
  data: ApplicationTypeUpdateInput!
}

input ApplicationTypeCreateInput {
  name: String
  applications: ApplicationRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
  locations: ApplicationLocationRelateToManyForCreateInput
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input ApplicationLocationRelateToManyForCreateInput {
  create: [ApplicationLocationCreateInput!]
  connect: [ApplicationLocationWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  price: Float
  currentStock: Int
  status: String
  images(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  imagesCount(where: FileWhereInput! = {}): Int
  code: String
  ean: String
  productBrand: ProductBrand
  pricedBy: String
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  applicationType: ApplicationType
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  documentProducts(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  documentProductsCount(where: DocumentProductWhereInput! = {}): Int
  warrantyType: String
  warrantyTimeScale: String
  warrantyTime: Float
  color: String
  width: Float
  length: Float
  height: Float
  depth: Float
  weight: Float
  thickness: Float
  extraFields: JSON
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  price: FloatFilter
  status: StringFilter
  images: FileManyRelationFilter
  code: StringFilter
  ean: StringFilter
  productBrand: ProductBrandWhereInput
  pricedBy: StringFilter
  applications: ApplicationManyRelationFilter
  applicationType: ApplicationTypeWhereInput
  stockMovements: StockMovementManyRelationFilter
  documentProducts: DocumentProductManyRelationFilter
  warrantyType: StringFilter
  warrantyTimeScale: StringFilter
  warrantyTime: FloatNullableFilter
  color: StringFilter
  width: FloatNullableFilter
  length: FloatNullableFilter
  height: FloatNullableFilter
  depth: FloatNullableFilter
  weight: FloatNullableFilter
  thickness: FloatNullableFilter
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  price: OrderDirection
  status: OrderDirection
  code: OrderDirection
  ean: OrderDirection
  pricedBy: OrderDirection
  warrantyType: OrderDirection
  warrantyTimeScale: OrderDirection
  warrantyTime: OrderDirection
  color: OrderDirection
  width: OrderDirection
  length: OrderDirection
  height: OrderDirection
  depth: OrderDirection
  weight: OrderDirection
  thickness: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  price: Float
  status: String
  images: FileRelateToManyForUpdateInput
  code: String
  ean: String
  productBrand: ProductBrandRelateToOneForUpdateInput
  pricedBy: String
  applications: ApplicationRelateToManyForUpdateInput
  applicationType: ApplicationTypeRelateToOneForUpdateInput
  stockMovements: StockMovementRelateToManyForUpdateInput
  documentProducts: DocumentProductRelateToManyForUpdateInput
  warrantyType: String
  warrantyTimeScale: String
  warrantyTime: Float
  color: String
  width: Float
  length: Float
  height: Float
  depth: Float
  weight: Float
  thickness: Float
  extraFields: JSON
}

input ProductBrandRelateToOneForUpdateInput {
  create: ProductBrandCreateInput
  connect: ProductBrandWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  price: Float
  status: String
  images: FileRelateToManyForCreateInput
  code: String
  ean: String
  productBrand: ProductBrandRelateToOneForCreateInput
  pricedBy: String
  applications: ApplicationRelateToManyForCreateInput
  applicationType: ApplicationTypeRelateToOneForCreateInput
  stockMovements: StockMovementRelateToManyForCreateInput
  documentProducts: DocumentProductRelateToManyForCreateInput
  warrantyType: String
  warrantyTimeScale: String
  warrantyTime: Float
  color: String
  width: Float
  length: Float
  height: Float
  depth: Float
  weight: Float
  thickness: Float
  extraFields: JSON
}

input ProductBrandRelateToOneForCreateInput {
  create: ProductBrandCreateInput
  connect: ProductBrandWhereUniqueInput
}

type Storage {
  id: ID!
  name: String
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
}

input StorageWhereUniqueInput {
  id: ID
}

input StorageWhereInput {
  AND: [StorageWhereInput!]
  OR: [StorageWhereInput!]
  NOT: [StorageWhereInput!]
  id: IDFilter
  name: StringFilter
  stockMovements: StockMovementManyRelationFilter
}

input StorageOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input StorageUpdateInput {
  name: String
  stockMovements: StockMovementRelateToManyForUpdateInput
}

input StorageUpdateArgs {
  where: StorageWhereUniqueInput!
  data: StorageUpdateInput!
}

input StorageCreateInput {
  name: String
  stockMovements: StockMovementRelateToManyForCreateInput
}

type StockMovement {
  id: ID!
  product: Product
  storage: Storage
  amount: Float
  movementType: String
  documentProduct: DocumentProduct
  note: String
  customer: User
  date: DateTime
  application: Application
  createdAt: DateTime
}

input StockMovementWhereUniqueInput {
  id: ID
}

input StockMovementWhereInput {
  AND: [StockMovementWhereInput!]
  OR: [StockMovementWhereInput!]
  NOT: [StockMovementWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  storage: StorageWhereInput
  amount: FloatFilter
  movementType: StringFilter
  documentProduct: DocumentProductWhereInput
  note: StringFilter
  customer: UserWhereInput
  date: DateTimeNullableFilter
  application: ApplicationWhereInput
  createdAt: DateTimeNullableFilter
}

input StockMovementOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  movementType: OrderDirection
  note: OrderDirection
  date: OrderDirection
  createdAt: OrderDirection
}

input StockMovementUpdateInput {
  product: ProductRelateToOneForUpdateInput
  storage: StorageRelateToOneForUpdateInput
  amount: Float
  movementType: String
  documentProduct: DocumentProductRelateToOneForUpdateInput
  note: String
  customer: UserRelateToOneForUpdateInput
  date: DateTime
  application: ApplicationRelateToOneForUpdateInput
  createdAt: DateTime
}

input StorageRelateToOneForUpdateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
  disconnect: Boolean
}

input DocumentProductRelateToOneForUpdateInput {
  create: DocumentProductCreateInput
  connect: DocumentProductWhereUniqueInput
  disconnect: Boolean
}

input StockMovementUpdateArgs {
  where: StockMovementWhereUniqueInput!
  data: StockMovementUpdateInput!
}

input StockMovementCreateInput {
  product: ProductRelateToOneForCreateInput
  storage: StorageRelateToOneForCreateInput
  amount: Float
  movementType: String
  documentProduct: DocumentProductRelateToOneForCreateInput
  note: String
  customer: UserRelateToOneForCreateInput
  date: DateTime
  application: ApplicationRelateToOneForCreateInput
  createdAt: DateTime
}

input StorageRelateToOneForCreateInput {
  create: StorageCreateInput
  connect: StorageWhereUniqueInput
}

input DocumentProductRelateToOneForCreateInput {
  create: DocumentProductCreateInput
  connect: DocumentProductWhereUniqueInput
}

type ProductBrand {
  id: ID!
  name: String
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

input ProductBrandWhereUniqueInput {
  id: ID
}

input ProductBrandWhereInput {
  AND: [ProductBrandWhereInput!]
  OR: [ProductBrandWhereInput!]
  NOT: [ProductBrandWhereInput!]
  id: IDFilter
  name: StringFilter
  products: ProductManyRelationFilter
}

input ProductBrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ProductBrandUpdateInput {
  name: String
  products: ProductRelateToManyForUpdateInput
}

input ProductBrandUpdateArgs {
  where: ProductBrandWhereUniqueInput!
  data: ProductBrandUpdateInput!
}

input ProductBrandCreateInput {
  name: String
  products: ProductRelateToManyForCreateInput
}

type Car {
  id: ID!
  vin: String
  carModel: CarModel
  licensePlate: String
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
}

input CarWhereUniqueInput {
  id: ID
}

input CarWhereInput {
  AND: [CarWhereInput!]
  OR: [CarWhereInput!]
  NOT: [CarWhereInput!]
  id: IDFilter
  vin: StringFilter
  carModel: CarModelWhereInput
  licensePlate: StringFilter
  workOrders: WorkOrderManyRelationFilter
}

input CarOrderByInput {
  id: OrderDirection
  vin: OrderDirection
  licensePlate: OrderDirection
}

input CarUpdateInput {
  vin: String
  carModel: CarModelRelateToOneForUpdateInput
  licensePlate: String
  workOrders: WorkOrderRelateToManyForUpdateInput
}

input CarModelRelateToOneForUpdateInput {
  create: CarModelCreateInput
  connect: CarModelWhereUniqueInput
  disconnect: Boolean
}

input CarUpdateArgs {
  where: CarWhereUniqueInput!
  data: CarUpdateInput!
}

input CarCreateInput {
  vin: String
  carModel: CarModelRelateToOneForCreateInput
  licensePlate: String
  workOrders: WorkOrderRelateToManyForCreateInput
}

input CarModelRelateToOneForCreateInput {
  create: CarModelCreateInput
  connect: CarModelWhereUniqueInput
}

type CarModel {
  id: ID!
  name: String
  cars(where: CarWhereInput! = {}, orderBy: [CarOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarWhereUniqueInput): [Car!]
  carsCount(where: CarWhereInput! = {}): Int
  carBrand: CarBrand
}

input CarModelWhereUniqueInput {
  id: ID
}

input CarModelWhereInput {
  AND: [CarModelWhereInput!]
  OR: [CarModelWhereInput!]
  NOT: [CarModelWhereInput!]
  id: IDFilter
  name: StringFilter
  cars: CarManyRelationFilter
  carBrand: CarBrandWhereInput
}

input CarManyRelationFilter {
  every: CarWhereInput
  some: CarWhereInput
  none: CarWhereInput
}

input CarModelOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CarModelUpdateInput {
  name: String
  cars: CarRelateToManyForUpdateInput
  carBrand: CarBrandRelateToOneForUpdateInput
}

input CarRelateToManyForUpdateInput {
  disconnect: [CarWhereUniqueInput!]
  set: [CarWhereUniqueInput!]
  create: [CarCreateInput!]
  connect: [CarWhereUniqueInput!]
}

input CarBrandRelateToOneForUpdateInput {
  create: CarBrandCreateInput
  connect: CarBrandWhereUniqueInput
  disconnect: Boolean
}

input CarModelUpdateArgs {
  where: CarModelWhereUniqueInput!
  data: CarModelUpdateInput!
}

input CarModelCreateInput {
  name: String
  cars: CarRelateToManyForCreateInput
  carBrand: CarBrandRelateToOneForCreateInput
}

input CarRelateToManyForCreateInput {
  create: [CarCreateInput!]
  connect: [CarWhereUniqueInput!]
}

input CarBrandRelateToOneForCreateInput {
  create: CarBrandCreateInput
  connect: CarBrandWhereUniqueInput
}

type CarBrand {
  id: ID!
  name: String
  carModels(where: CarModelWhereInput! = {}, orderBy: [CarModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarModelWhereUniqueInput): [CarModel!]
  carModelsCount(where: CarModelWhereInput! = {}): Int
}

input CarBrandWhereUniqueInput {
  id: ID
}

input CarBrandWhereInput {
  AND: [CarBrandWhereInput!]
  OR: [CarBrandWhereInput!]
  NOT: [CarBrandWhereInput!]
  id: IDFilter
  name: StringFilter
  carModels: CarModelManyRelationFilter
}

input CarModelManyRelationFilter {
  every: CarModelWhereInput
  some: CarModelWhereInput
  none: CarModelWhereInput
}

input CarBrandOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CarBrandUpdateInput {
  name: String
  carModels: CarModelRelateToManyForUpdateInput
}

input CarModelRelateToManyForUpdateInput {
  disconnect: [CarModelWhereUniqueInput!]
  set: [CarModelWhereUniqueInput!]
  create: [CarModelCreateInput!]
  connect: [CarModelWhereUniqueInput!]
}

input CarBrandUpdateArgs {
  where: CarBrandWhereUniqueInput!
  data: CarBrandUpdateInput!
}

input CarBrandCreateInput {
  name: String
  carModels: CarModelRelateToManyForCreateInput
}

input CarModelRelateToManyForCreateInput {
  create: [CarModelCreateInput!]
  connect: [CarModelWhereUniqueInput!]
}

type ApplicationLocation {
  id: ID!
  name: String
  applicationTypes(where: ApplicationTypeWhereInput! = {}, orderBy: [ApplicationTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationTypeWhereUniqueInput): [ApplicationType!]
  applicationTypesCount(where: ApplicationTypeWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  applicationsCount(where: ApplicationWhereInput! = {}): Int
}

input ApplicationLocationWhereUniqueInput {
  id: ID
}

input ApplicationLocationWhereInput {
  AND: [ApplicationLocationWhereInput!]
  OR: [ApplicationLocationWhereInput!]
  NOT: [ApplicationLocationWhereInput!]
  id: IDFilter
  name: StringFilter
  applicationTypes: ApplicationTypeManyRelationFilter
  applications: ApplicationManyRelationFilter
}

input ApplicationTypeManyRelationFilter {
  every: ApplicationTypeWhereInput
  some: ApplicationTypeWhereInput
  none: ApplicationTypeWhereInput
}

input ApplicationLocationOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input ApplicationLocationUpdateInput {
  name: String
  applicationTypes: ApplicationTypeRelateToManyForUpdateInput
  applications: ApplicationRelateToManyForUpdateInput
}

input ApplicationTypeRelateToManyForUpdateInput {
  disconnect: [ApplicationTypeWhereUniqueInput!]
  set: [ApplicationTypeWhereUniqueInput!]
  create: [ApplicationTypeCreateInput!]
  connect: [ApplicationTypeWhereUniqueInput!]
}

input ApplicationLocationUpdateArgs {
  where: ApplicationLocationWhereUniqueInput!
  data: ApplicationLocationUpdateInput!
}

input ApplicationLocationCreateInput {
  name: String
  applicationTypes: ApplicationTypeRelateToManyForCreateInput
  applications: ApplicationRelateToManyForCreateInput
}

input ApplicationTypeRelateToManyForCreateInput {
  create: [ApplicationTypeCreateInput!]
  connect: [ApplicationTypeWhereUniqueInput!]
}

type PaymentPlan {
  id: ID!
  name: String
  workOrder: WorkOrder
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  paymentsCount(where: PaymentWhereInput! = {}): Int
  document: Document
  periods: Float
  periodDuration: Float
  periodPayment: Float
  periodDurationScale: String
  total: Float
  paid: Float
  toPay: Float
  nextPaymentDate: String
  completed: Boolean
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notificationsCount(where: NotificationWhereInput! = {}): Int
}

input PaymentPlanWhereUniqueInput {
  id: ID
}

input PaymentPlanWhereInput {
  AND: [PaymentPlanWhereInput!]
  OR: [PaymentPlanWhereInput!]
  NOT: [PaymentPlanWhereInput!]
  id: IDFilter
  name: StringFilter
  workOrder: WorkOrderWhereInput
  payments: PaymentManyRelationFilter
  document: DocumentWhereInput
  periods: FloatFilter
  periodDuration: FloatFilter
  periodPayment: FloatFilter
  periodDurationScale: StringFilter
  notifications: NotificationManyRelationFilter
}

input PaymentManyRelationFilter {
  every: PaymentWhereInput
  some: PaymentWhereInput
  none: PaymentWhereInput
}

input PaymentPlanOrderByInput {
  id: OrderDirection
  name: OrderDirection
  periods: OrderDirection
  periodDuration: OrderDirection
  periodPayment: OrderDirection
  periodDurationScale: OrderDirection
}

input PaymentPlanUpdateInput {
  name: String
  workOrder: WorkOrderRelateToOneForUpdateInput
  payments: PaymentRelateToManyForUpdateInput
  document: DocumentRelateToOneForUpdateInput
  periods: Float
  periodDuration: Float
  periodPayment: Float
  periodDurationScale: String
  notifications: NotificationRelateToManyForUpdateInput
}

input PaymentRelateToManyForUpdateInput {
  disconnect: [PaymentWhereUniqueInput!]
  set: [PaymentWhereUniqueInput!]
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentPlanUpdateArgs {
  where: PaymentPlanWhereUniqueInput!
  data: PaymentPlanUpdateInput!
}

input PaymentPlanCreateInput {
  name: String
  workOrder: WorkOrderRelateToOneForCreateInput
  payments: PaymentRelateToManyForCreateInput
  document: DocumentRelateToOneForCreateInput
  periods: Float
  periodDuration: Float
  periodPayment: Float
  periodDurationScale: String
  notifications: NotificationRelateToManyForCreateInput
}

input PaymentRelateToManyForCreateInput {
  create: [PaymentCreateInput!]
  connect: [PaymentWhereUniqueInput!]
}

type Payment {
  id: ID!
  amount: Float
  paymentPlan: PaymentPlan
  reference: String
  type: String
  date: DateTime
}

input PaymentWhereUniqueInput {
  id: ID
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  NOT: [PaymentWhereInput!]
  id: IDFilter
  amount: FloatFilter
  paymentPlan: PaymentPlanWhereInput
  reference: StringFilter
  type: StringFilter
  date: DateTimeNullableFilter
}

input PaymentOrderByInput {
  id: OrderDirection
  amount: OrderDirection
  reference: OrderDirection
  type: OrderDirection
  date: OrderDirection
}

input PaymentUpdateInput {
  amount: Float
  paymentPlan: PaymentPlanRelateToOneForUpdateInput
  reference: String
  type: String
  date: DateTime
}

input PaymentUpdateArgs {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateInput!
}

input PaymentCreateInput {
  amount: Float
  paymentPlan: PaymentPlanRelateToOneForCreateInput
  reference: String
  type: String
  date: DateTime
}

type Notification {
  id: ID!
  date: DateTime
  message: String
  paymentPlan: PaymentPlan
  workOrder: WorkOrder
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

enum NotificationNotifyRoleType {
  admin
  customer
  employee
  manager
}

input NotificationWhereUniqueInput {
  id: ID
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  NOT: [NotificationWhereInput!]
  id: IDFilter
  date: DateTimeNullableFilter
  message: StringFilter
  paymentPlan: PaymentPlanWhereInput
  workOrder: WorkOrderWhereInput
  link: StringFilter
  handled: BooleanFilter
}

input NotificationOrderByInput {
  id: OrderDirection
  date: OrderDirection
  message: OrderDirection
  link: OrderDirection
  handled: OrderDirection
}

input NotificationUpdateInput {
  date: DateTime
  message: String
  paymentPlan: PaymentPlanRelateToOneForUpdateInput
  workOrder: WorkOrderRelateToOneForUpdateInput
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

input NotificationUpdateArgs {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateInput!
}

input NotificationCreateInput {
  date: DateTime
  message: String
  paymentPlan: PaymentPlanRelateToOneForCreateInput
  workOrder: WorkOrderRelateToOneForCreateInput
  link: String
  handled: Boolean
  notifyRoles: [NotificationNotifyRoleType!]
}

type SoftwareVersion {
  id: ID!
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

input SoftwareVersionWhereUniqueInput {
  id: ID
}

input SoftwareVersionWhereInput {
  AND: [SoftwareVersionWhereInput!]
  OR: [SoftwareVersionWhereInput!]
  NOT: [SoftwareVersionWhereInput!]
  id: IDFilter
  version: IntFilter
  iosLink: StringFilter
  androidLink: StringFilter
  webLink: StringFilter
  windowsLink: StringFilter
  macLink: StringFilter
  date: DateTimeNullableFilter
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input SoftwareVersionOrderByInput {
  id: OrderDirection
  version: OrderDirection
  iosLink: OrderDirection
  androidLink: OrderDirection
  webLink: OrderDirection
  windowsLink: OrderDirection
  macLink: OrderDirection
  date: OrderDirection
}

input SoftwareVersionUpdateInput {
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

input SoftwareVersionUpdateArgs {
  where: SoftwareVersionWhereUniqueInput! = {id: 1}
  data: SoftwareVersionUpdateInput!
}

input SoftwareVersionCreateInput {
  version: Int
  iosLink: String
  androidLink: String
  webLink: String
  windowsLink: String
  macLink: String
  date: DateTime
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createNote(data: NoteCreateInput!): Note
  createNotes(data: [NoteCreateInput!]!): [Note]
  updateNote(where: NoteWhereUniqueInput!, data: NoteUpdateInput!): Note
  updateNotes(data: [NoteUpdateArgs!]!): [Note]
  deleteNote(where: NoteWhereUniqueInput!): Note
  deleteNotes(where: [NoteWhereUniqueInput!]!): [Note]
  createFile(data: FileCreateInput!): File
  createFiles(data: [FileCreateInput!]!): [File]
  updateFile(where: FileWhereUniqueInput!, data: FileUpdateInput!): File
  updateFiles(data: [FileUpdateArgs!]!): [File]
  deleteFile(where: FileWhereUniqueInput!): File
  deleteFiles(where: [FileWhereUniqueInput!]!): [File]
  createDocument(data: DocumentCreateInput!): Document
  createDocuments(data: [DocumentCreateInput!]!): [Document]
  updateDocument(where: DocumentWhereUniqueInput!, data: DocumentUpdateInput!): Document
  updateDocuments(data: [DocumentUpdateArgs!]!): [Document]
  deleteDocument(where: DocumentWhereUniqueInput!): Document
  deleteDocuments(where: [DocumentWhereUniqueInput!]!): [Document]
  createDocumentProduct(data: DocumentProductCreateInput!): DocumentProduct
  createDocumentProducts(data: [DocumentProductCreateInput!]!): [DocumentProduct]
  updateDocumentProduct(where: DocumentProductWhereUniqueInput!, data: DocumentProductUpdateInput!): DocumentProduct
  updateDocumentProducts(data: [DocumentProductUpdateArgs!]!): [DocumentProduct]
  deleteDocumentProduct(where: DocumentProductWhereUniqueInput!): DocumentProduct
  deleteDocumentProducts(where: [DocumentProductWhereUniqueInput!]!): [DocumentProduct]
  createWorkOrder(data: WorkOrderCreateInput!): WorkOrder
  createWorkOrders(data: [WorkOrderCreateInput!]!): [WorkOrder]
  updateWorkOrder(where: WorkOrderWhereUniqueInput!, data: WorkOrderUpdateInput!): WorkOrder
  updateWorkOrders(data: [WorkOrderUpdateArgs!]!): [WorkOrder]
  deleteWorkOrder(where: WorkOrderWhereUniqueInput!): WorkOrder
  deleteWorkOrders(where: [WorkOrderWhereUniqueInput!]!): [WorkOrder]
  createApplication(data: ApplicationCreateInput!): Application
  createApplications(data: [ApplicationCreateInput!]!): [Application]
  updateApplication(where: ApplicationWhereUniqueInput!, data: ApplicationUpdateInput!): Application
  updateApplications(data: [ApplicationUpdateArgs!]!): [Application]
  deleteApplication(where: ApplicationWhereUniqueInput!): Application
  deleteApplications(where: [ApplicationWhereUniqueInput!]!): [Application]
  createApplicationType(data: ApplicationTypeCreateInput!): ApplicationType
  createApplicationTypes(data: [ApplicationTypeCreateInput!]!): [ApplicationType]
  updateApplicationType(where: ApplicationTypeWhereUniqueInput!, data: ApplicationTypeUpdateInput!): ApplicationType
  updateApplicationTypes(data: [ApplicationTypeUpdateArgs!]!): [ApplicationType]
  deleteApplicationType(where: ApplicationTypeWhereUniqueInput!): ApplicationType
  deleteApplicationTypes(where: [ApplicationTypeWhereUniqueInput!]!): [ApplicationType]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(where: ProductWhereUniqueInput!, data: ProductUpdateInput!): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createStorage(data: StorageCreateInput!): Storage
  createStorages(data: [StorageCreateInput!]!): [Storage]
  updateStorage(where: StorageWhereUniqueInput!, data: StorageUpdateInput!): Storage
  updateStorages(data: [StorageUpdateArgs!]!): [Storage]
  deleteStorage(where: StorageWhereUniqueInput!): Storage
  deleteStorages(where: [StorageWhereUniqueInput!]!): [Storage]
  createStockMovement(data: StockMovementCreateInput!): StockMovement
  createStockMovements(data: [StockMovementCreateInput!]!): [StockMovement]
  updateStockMovement(where: StockMovementWhereUniqueInput!, data: StockMovementUpdateInput!): StockMovement
  updateStockMovements(data: [StockMovementUpdateArgs!]!): [StockMovement]
  deleteStockMovement(where: StockMovementWhereUniqueInput!): StockMovement
  deleteStockMovements(where: [StockMovementWhereUniqueInput!]!): [StockMovement]
  createProductBrand(data: ProductBrandCreateInput!): ProductBrand
  createProductBrands(data: [ProductBrandCreateInput!]!): [ProductBrand]
  updateProductBrand(where: ProductBrandWhereUniqueInput!, data: ProductBrandUpdateInput!): ProductBrand
  updateProductBrands(data: [ProductBrandUpdateArgs!]!): [ProductBrand]
  deleteProductBrand(where: ProductBrandWhereUniqueInput!): ProductBrand
  deleteProductBrands(where: [ProductBrandWhereUniqueInput!]!): [ProductBrand]
  createCar(data: CarCreateInput!): Car
  createCars(data: [CarCreateInput!]!): [Car]
  updateCar(where: CarWhereUniqueInput!, data: CarUpdateInput!): Car
  updateCars(data: [CarUpdateArgs!]!): [Car]
  deleteCar(where: CarWhereUniqueInput!): Car
  deleteCars(where: [CarWhereUniqueInput!]!): [Car]
  createCarModel(data: CarModelCreateInput!): CarModel
  createCarModels(data: [CarModelCreateInput!]!): [CarModel]
  updateCarModel(where: CarModelWhereUniqueInput!, data: CarModelUpdateInput!): CarModel
  updateCarModels(data: [CarModelUpdateArgs!]!): [CarModel]
  deleteCarModel(where: CarModelWhereUniqueInput!): CarModel
  deleteCarModels(where: [CarModelWhereUniqueInput!]!): [CarModel]
  createCarBrand(data: CarBrandCreateInput!): CarBrand
  createCarBrands(data: [CarBrandCreateInput!]!): [CarBrand]
  updateCarBrand(where: CarBrandWhereUniqueInput!, data: CarBrandUpdateInput!): CarBrand
  updateCarBrands(data: [CarBrandUpdateArgs!]!): [CarBrand]
  deleteCarBrand(where: CarBrandWhereUniqueInput!): CarBrand
  deleteCarBrands(where: [CarBrandWhereUniqueInput!]!): [CarBrand]
  createApplicationLocation(data: ApplicationLocationCreateInput!): ApplicationLocation
  createApplicationLocations(data: [ApplicationLocationCreateInput!]!): [ApplicationLocation]
  updateApplicationLocation(where: ApplicationLocationWhereUniqueInput!, data: ApplicationLocationUpdateInput!): ApplicationLocation
  updateApplicationLocations(data: [ApplicationLocationUpdateArgs!]!): [ApplicationLocation]
  deleteApplicationLocation(where: ApplicationLocationWhereUniqueInput!): ApplicationLocation
  deleteApplicationLocations(where: [ApplicationLocationWhereUniqueInput!]!): [ApplicationLocation]
  createPaymentPlan(data: PaymentPlanCreateInput!): PaymentPlan
  createPaymentPlans(data: [PaymentPlanCreateInput!]!): [PaymentPlan]
  updatePaymentPlan(where: PaymentPlanWhereUniqueInput!, data: PaymentPlanUpdateInput!): PaymentPlan
  updatePaymentPlans(data: [PaymentPlanUpdateArgs!]!): [PaymentPlan]
  deletePaymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  deletePaymentPlans(where: [PaymentPlanWhereUniqueInput!]!): [PaymentPlan]
  createPayment(data: PaymentCreateInput!): Payment
  createPayments(data: [PaymentCreateInput!]!): [Payment]
  updatePayment(where: PaymentWhereUniqueInput!, data: PaymentUpdateInput!): Payment
  updatePayments(data: [PaymentUpdateArgs!]!): [Payment]
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePayments(where: [PaymentWhereUniqueInput!]!): [Payment]
  createNotification(data: NotificationCreateInput!): Notification
  createNotifications(data: [NotificationCreateInput!]!): [Notification]
  updateNotification(where: NotificationWhereUniqueInput!, data: NotificationUpdateInput!): Notification
  updateNotifications(data: [NotificationUpdateArgs!]!): [Notification]
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteNotifications(where: [NotificationWhereUniqueInput!]!): [Notification]
  createSoftwareVersion(data: SoftwareVersionCreateInput!): SoftwareVersion
  createSoftwareVersions(data: [SoftwareVersionCreateInput!]!): [SoftwareVersion]
  updateSoftwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}, data: SoftwareVersionUpdateInput!): SoftwareVersion
  updateSoftwareVersions(data: [SoftwareVersionUpdateArgs!]!): [SoftwareVersion]
  deleteSoftwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}): SoftwareVersion
  deleteSoftwareVersions(where: [SoftwareVersionWhereUniqueInput!]!): [SoftwareVersion]
  endSession: Boolean!
  authenticateUserWithPassword(username: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  username: String
  email: String
  firstname: String
  role: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  notes(where: NoteWhereInput! = {}, orderBy: [NoteOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NoteWhereUniqueInput): [Note!]
  note(where: NoteWhereUniqueInput!): Note
  notesCount(where: NoteWhereInput! = {}): Int
  files(where: FileWhereInput! = {}, orderBy: [FileOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: FileWhereUniqueInput): [File!]
  file(where: FileWhereUniqueInput!): File
  filesCount(where: FileWhereInput! = {}): Int
  documents(where: DocumentWhereInput! = {}, orderBy: [DocumentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentWhereUniqueInput): [Document!]
  document(where: DocumentWhereUniqueInput!): Document
  documentsCount(where: DocumentWhereInput! = {}): Int
  documentProducts(where: DocumentProductWhereInput! = {}, orderBy: [DocumentProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: DocumentProductWhereUniqueInput): [DocumentProduct!]
  documentProduct(where: DocumentProductWhereUniqueInput!): DocumentProduct
  documentProductsCount(where: DocumentProductWhereInput! = {}): Int
  workOrders(where: WorkOrderWhereInput! = {}, orderBy: [WorkOrderOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: WorkOrderWhereUniqueInput): [WorkOrder!]
  workOrder(where: WorkOrderWhereUniqueInput!): WorkOrder
  workOrdersCount(where: WorkOrderWhereInput! = {}): Int
  applications(where: ApplicationWhereInput! = {}, orderBy: [ApplicationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationWhereUniqueInput): [Application!]
  application(where: ApplicationWhereUniqueInput!): Application
  applicationsCount(where: ApplicationWhereInput! = {}): Int
  applicationTypes(where: ApplicationTypeWhereInput! = {}, orderBy: [ApplicationTypeOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationTypeWhereUniqueInput): [ApplicationType!]
  applicationType(where: ApplicationTypeWhereUniqueInput!): ApplicationType
  applicationTypesCount(where: ApplicationTypeWhereInput! = {}): Int
  products(where: ProductWhereInput! = {}, orderBy: [ProductOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductWhereUniqueInput): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  storages(where: StorageWhereInput! = {}, orderBy: [StorageOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StorageWhereUniqueInput): [Storage!]
  storage(where: StorageWhereUniqueInput!): Storage
  storagesCount(where: StorageWhereInput! = {}): Int
  stockMovements(where: StockMovementWhereInput! = {}, orderBy: [StockMovementOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: StockMovementWhereUniqueInput): [StockMovement!]
  stockMovement(where: StockMovementWhereUniqueInput!): StockMovement
  stockMovementsCount(where: StockMovementWhereInput! = {}): Int
  productBrands(where: ProductBrandWhereInput! = {}, orderBy: [ProductBrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ProductBrandWhereUniqueInput): [ProductBrand!]
  productBrand(where: ProductBrandWhereUniqueInput!): ProductBrand
  productBrandsCount(where: ProductBrandWhereInput! = {}): Int
  cars(where: CarWhereInput! = {}, orderBy: [CarOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarWhereUniqueInput): [Car!]
  car(where: CarWhereUniqueInput!): Car
  carsCount(where: CarWhereInput! = {}): Int
  carModels(where: CarModelWhereInput! = {}, orderBy: [CarModelOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarModelWhereUniqueInput): [CarModel!]
  carModel(where: CarModelWhereUniqueInput!): CarModel
  carModelsCount(where: CarModelWhereInput! = {}): Int
  carBrands(where: CarBrandWhereInput! = {}, orderBy: [CarBrandOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: CarBrandWhereUniqueInput): [CarBrand!]
  carBrand(where: CarBrandWhereUniqueInput!): CarBrand
  carBrandsCount(where: CarBrandWhereInput! = {}): Int
  applicationLocations(where: ApplicationLocationWhereInput! = {}, orderBy: [ApplicationLocationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: ApplicationLocationWhereUniqueInput): [ApplicationLocation!]
  applicationLocation(where: ApplicationLocationWhereUniqueInput!): ApplicationLocation
  applicationLocationsCount(where: ApplicationLocationWhereInput! = {}): Int
  paymentPlans(where: PaymentPlanWhereInput! = {}, orderBy: [PaymentPlanOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentPlanWhereUniqueInput): [PaymentPlan!]
  paymentPlan(where: PaymentPlanWhereUniqueInput!): PaymentPlan
  paymentPlansCount(where: PaymentPlanWhereInput! = {}): Int
  payments(where: PaymentWhereInput! = {}, orderBy: [PaymentOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: PaymentWhereUniqueInput): [Payment!]
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentsCount(where: PaymentWhereInput! = {}): Int
  notifications(where: NotificationWhereInput! = {}, orderBy: [NotificationOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: NotificationWhereUniqueInput): [Notification!]
  notification(where: NotificationWhereUniqueInput!): Notification
  notificationsCount(where: NotificationWhereInput! = {}): Int
  softwareVersions(where: SoftwareVersionWhereInput! = {id: {equals: 1}}, orderBy: [SoftwareVersionOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SoftwareVersionWhereUniqueInput): [SoftwareVersion!]
  softwareVersion(where: SoftwareVersionWhereUniqueInput! = {id: 1}): SoftwareVersion
  softwareVersionsCount(where: SoftwareVersionWhereInput! = {id: {equals: 1}}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
