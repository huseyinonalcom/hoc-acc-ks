// This file is automatically generated by Keystone, do not modify it manually.
// Modify your Keystone config when you want to change this.

datasource sqlite {
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  provider          = "sqlite"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                String          @id @default(cuid())
  name              String          @default("")
  username          String          @unique @default("")
  email             String          @unique @default("")
  isBlocked         Boolean         @default(false)
  phone             String          @default("")
  role              String          @default("customer")
  permissions       String          @default("[]")
  ssid              String          @default("")
  password          String
  operations        Operation[]     @relation("Operation_creator")
  notes             Note[]          @relation("Note_creator")
  documents         Document[]      @relation("Document_creator")
  customerDocuments Document[]      @relation("Document_customer")
  customerMovements StockMovement[] @relation("StockMovement_customer")
  extraFields       String?

  @@index([role])
}

model Note {
  id          String  @id @default(cuid())
  note        String  @default("")
  creator     User?   @relation("Note_creator", fields: [creatorId], references: [id])
  creatorId   String? @map("creator")
  extraFields String?

  @@index([creatorId])
}

model File {
  id          String     @id @default(cuid())
  name        String     @default("")
  url         String     @default("")
  operation   Operation? @relation("File_operation", fields: [operationId], references: [id])
  operationId String?    @map("operation")
  material    Material?  @relation("File_material", fields: [materialId], references: [id])
  materialId  String?    @map("material")
  extraFields String?

  @@index([operationId])
  @@index([materialId])
}

model Document {
  id             String            @id @default(cuid())
  createdAt      DateTime?         @default(now())
  documentType   String            @default("satış")
  creator        User?             @relation("Document_creator", fields: [creatorId], references: [id])
  creatorId      String?           @map("creator")
  customer       User?             @relation("Document_customer", fields: [customerId], references: [id])
  customerId     String?           @map("customer")
  reduction      Float?            @default(0)
  isDeleted      Boolean           @default(false)
  fromDocument   Document?         @relation("Document_fromDocument", fields: [fromDocumentId], references: [id])
  fromDocumentId String?           @unique @map("fromDocument")
  toDocument     Document?         @relation("Document_fromDocument")
  products       DocumentProduct[] @relation("DocumentProduct_document")
  payments       Payment[]         @relation("Payment_document")
  extraFields    String?

  @@index([creatorId])
  @@index([customerId])
}

model DocumentProduct {
  id             String          @id @default(cuid())
  amount         Float
  stockMovements StockMovement[] @relation("StockMovement_documentProduct")
  product        Material?       @relation("DocumentProduct_product", fields: [productId], references: [id])
  productId      String?         @map("product")
  price          Float
  document       Document?       @relation("DocumentProduct_document", fields: [documentId], references: [id])
  documentId     String?         @map("document")
  extraFields    String?

  @@index([productId])
  @@index([documentId])
}

model Operation {
  id          String    @id @default(cuid())
  files       File[]    @relation("File_operation")
  startedAt   DateTime?
  finishedAt  DateTime?
  name        String    @default("")
  description String    @default("")
  value       Float
  amount      Float
  wastage     Float?    @default(0)
  material    Material? @relation("Operation_material", fields: [materialId], references: [id])
  materialId  String?   @map("material")
  creator     User?     @relation("Operation_creator", fields: [creatorId], references: [id])
  creatorId   String?   @map("creator")
  extraFields String?

  @@index([materialId])
  @@index([creatorId])
}

model Material {
  id               String            @id @default(cuid())
  name             String            @default("")
  description      String            @default("")
  price            Float
  status           String            @default("aktif")
  files            File[]            @relation("File_material")
  code             String            @default("")
  ean              String            @default("")
  brand            Brand?            @relation("Material_brand", fields: [brandId], references: [id])
  brandId          String?           @map("brand")
  suppliers        Supplier[]        @relation("Material_suppliers")
  pricedBy         String            @default("amount")
  operations       Operation[]       @relation("Operation_material")
  stockMovements   StockMovement[]   @relation("StockMovement_material")
  documentProducts DocumentProduct[] @relation("DocumentProduct_product")
  extraFields      String?

  @@index([brandId])
}

model Storage {
  id             String          @id @default(cuid())
  name           String          @default("")
  stockMovements StockMovement[] @relation("StockMovement_storage")
  extraFields    String?
}

model StockMovement {
  id                String           @id @default(cuid())
  material          Material?        @relation("StockMovement_material", fields: [materialId], references: [id])
  materialId        String?          @map("material")
  storage           Storage?         @relation("StockMovement_storage", fields: [storageId], references: [id])
  storageId         String?          @map("storage")
  amount            Float
  movementType      String           @default("giriş")
  documentProduct   DocumentProduct? @relation("StockMovement_documentProduct", fields: [documentProductId], references: [id])
  documentProductId String?          @map("documentProduct")
  note              String           @default("")
  customer          User?            @relation("StockMovement_customer", fields: [customerId], references: [id])
  customerId        String?          @map("customer")
  date              DateTime?        @default(now())
  createdAt         DateTime?        @default(now())
  extraFields       String?

  @@index([materialId])
  @@index([storageId])
  @@index([documentProductId])
  @@index([customerId])
}

model Supplier {
  id          String     @id @default(cuid())
  name        String     @default("")
  materials   Material[] @relation("Material_suppliers")
  extraFields String?
}

model Brand {
  id          String     @id @default(cuid())
  name        String     @default("")
  materials   Material[] @relation("Material_brand")
  extraFields String?
}

model Payment {
  id          String    @id @default(cuid())
  amount      Float
  document    Document? @relation("Payment_document", fields: [documentId], references: [id])
  documentId  String?   @map("document")
  reference   String    @default("")
  type        String    @default("nakit")
  timestamp   DateTime? @default(now())
  extraFields String?

  @@index([documentId])
}

model Notification {
  id          String    @id @default(cuid())
  date        DateTime? @default(now())
  message     String    @default("")
  link        String    @default("")
  handled     Boolean   @default(false)
  notifyRoles String    @default("[]")
}

model SoftwareVersion {
  id          Int       @id
  version     Int
  iosLink     String    @default("")
  androidLink String    @default("")
  webLink     String    @default("")
  windowsLink String    @default("")
  macLink     String    @default("")
  date        DateTime? @default(now())
}

model Config {
  id                 Int     @id
  defaultCurrency    String  @default("TRY")
  extraFieldsProduct String?
}
